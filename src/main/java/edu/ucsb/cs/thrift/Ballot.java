/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsb.cs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-8")
public class Ballot {

    public interface Iface {

        public void prepare(long ballotNumber, long myId) throws org.apache.thrift.TException;

        public void ack(long ballotNumber, long acceptedNumber, long acceptedVal) throws org.apache.thrift.TException;

        public void accept(long ballotNumber, long leaderVal) throws org.apache.thrift.TException;

        public void accepted(long ballotNumber, long val) throws org.apache.thrift.TException;

        public void decide(long ballotNumber, long value) throws org.apache.thrift.TException;

        public List<Long> update(long lastAcceptedBallot) throws org.apache.thrift.TException;

        public boolean isLeader() throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void prepare(long ballotNumber, long myId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void ack(long ballotNumber, long acceptedNumber, long acceptedVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void accept(long ballotNumber, long leaderVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void accepted(long ballotNumber, long val, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void decide(long ballotNumber, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void update(long lastAcceptedBallot, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void isLeader(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void prepare(long ballotNumber, long myId) throws org.apache.thrift.TException
        {
            send_prepare(ballotNumber, myId);
        }

        public void send_prepare(long ballotNumber, long myId) throws org.apache.thrift.TException
        {
            prepare_args args = new prepare_args();
            args.setBallotNumber(ballotNumber);
            args.setMyId(myId);
            sendBase("prepare", args);
        }

        public void ack(long ballotNumber, long acceptedNumber, long acceptedVal) throws org.apache.thrift.TException
        {
            send_ack(ballotNumber, acceptedNumber, acceptedVal);
        }

        public void send_ack(long ballotNumber, long acceptedNumber, long acceptedVal) throws org.apache.thrift.TException
        {
            ack_args args = new ack_args();
            args.setBallotNumber(ballotNumber);
            args.setAcceptedNumber(acceptedNumber);
            args.setAcceptedVal(acceptedVal);
            sendBase("ack", args);
        }

        public void accept(long ballotNumber, long leaderVal) throws org.apache.thrift.TException
        {
            send_accept(ballotNumber, leaderVal);
        }

        public void send_accept(long ballotNumber, long leaderVal) throws org.apache.thrift.TException
        {
            accept_args args = new accept_args();
            args.setBallotNumber(ballotNumber);
            args.setLeaderVal(leaderVal);
            sendBase("accept", args);
        }

        public void accepted(long ballotNumber, long val) throws org.apache.thrift.TException
        {
            send_accepted(ballotNumber, val);
        }

        public void send_accepted(long ballotNumber, long val) throws org.apache.thrift.TException
        {
            accepted_args args = new accepted_args();
            args.setBallotNumber(ballotNumber);
            args.setVal(val);
            sendBase("accepted", args);
        }

        public void decide(long ballotNumber, long value) throws org.apache.thrift.TException
        {
            send_decide(ballotNumber, value);
        }

        public void send_decide(long ballotNumber, long value) throws org.apache.thrift.TException
        {
            decide_args args = new decide_args();
            args.setBallotNumber(ballotNumber);
            args.setValue(value);
            sendBase("decide", args);
        }

        public List<Long> update(long lastAcceptedBallot) throws org.apache.thrift.TException
        {
            send_update(lastAcceptedBallot);
            return recv_update();
        }

        public void send_update(long lastAcceptedBallot) throws org.apache.thrift.TException
        {
            update_args args = new update_args();
            args.setLastAcceptedBallot(lastAcceptedBallot);
            sendBase("update", args);
        }

        public List<Long> recv_update() throws org.apache.thrift.TException
        {
            update_result result = new update_result();
            receiveBase(result, "update");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
        }

        public boolean isLeader() throws org.apache.thrift.TException
        {
            send_isLeader();
            return recv_isLeader();
        }

        public void send_isLeader() throws org.apache.thrift.TException
        {
            isLeader_args args = new isLeader_args();
            sendBase("isLeader", args);
        }

        public boolean recv_isLeader() throws org.apache.thrift.TException
        {
            isLeader_result result = new isLeader_result();
            receiveBase(result, "isLeader");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isLeader failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void prepare(long ballotNumber, long myId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            prepare_call method_call = new prepare_call(ballotNumber, myId, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class prepare_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long ballotNumber;
            private long myId;
            public prepare_call(long ballotNumber, long myId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.ballotNumber = ballotNumber;
                this.myId = myId;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prepare", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                prepare_args args = new prepare_args();
                args.setBallotNumber(ballotNumber);
                args.setMyId(myId);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void ack(long ballotNumber, long acceptedNumber, long acceptedVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            ack_call method_call = new ack_call(ballotNumber, acceptedNumber, acceptedVal, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class ack_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long ballotNumber;
            private long acceptedNumber;
            private long acceptedVal;
            public ack_call(long ballotNumber, long acceptedNumber, long acceptedVal, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.ballotNumber = ballotNumber;
                this.acceptedNumber = acceptedNumber;
                this.acceptedVal = acceptedVal;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ack", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                ack_args args = new ack_args();
                args.setBallotNumber(ballotNumber);
                args.setAcceptedNumber(acceptedNumber);
                args.setAcceptedVal(acceptedVal);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void accept(long ballotNumber, long leaderVal, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            accept_call method_call = new accept_call(ballotNumber, leaderVal, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class accept_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long ballotNumber;
            private long leaderVal;
            public accept_call(long ballotNumber, long leaderVal, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.ballotNumber = ballotNumber;
                this.leaderVal = leaderVal;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accept", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                accept_args args = new accept_args();
                args.setBallotNumber(ballotNumber);
                args.setLeaderVal(leaderVal);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void accepted(long ballotNumber, long val, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            accepted_call method_call = new accepted_call(ballotNumber, val, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class accepted_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long ballotNumber;
            private long val;
            public accepted_call(long ballotNumber, long val, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.ballotNumber = ballotNumber;
                this.val = val;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accepted", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                accepted_args args = new accepted_args();
                args.setBallotNumber(ballotNumber);
                args.setVal(val);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void decide(long ballotNumber, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            decide_call method_call = new decide_call(ballotNumber, value, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class decide_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long ballotNumber;
            private long value;
            public decide_call(long ballotNumber, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.ballotNumber = ballotNumber;
                this.value = value;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("decide", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                decide_args args = new decide_args();
                args.setBallotNumber(ballotNumber);
                args.setValue(value);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void update(long lastAcceptedBallot, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            update_call method_call = new update_call(lastAcceptedBallot, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
            private long lastAcceptedBallot;
            public update_call(long lastAcceptedBallot, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.lastAcceptedBallot = lastAcceptedBallot;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
                update_args args = new update_args();
                args.setLastAcceptedBallot(lastAcceptedBallot);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Long> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_update();
            }
        }

        public void isLeader(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            isLeader_call method_call = new isLeader_call(resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class isLeader_call extends org.apache.thrift.async.TAsyncMethodCall {
            public isLeader_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isLeader", org.apache.thrift.protocol.TMessageType.CALL, 0));
                isLeader_args args = new isLeader_args();
                args.write(prot);
                prot.writeMessageEnd();
            }

            public boolean getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_isLeader();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("prepare", new prepare());
            processMap.put("ack", new ack());
            processMap.put("accept", new accept());
            processMap.put("accepted", new accepted());
            processMap.put("decide", new decide());
            processMap.put("update", new update());
            processMap.put("isLeader", new isLeader());
            return processMap;
        }

        public static class prepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prepare_args> {
            public prepare() {
                super("prepare");
            }

            public prepare_args getEmptyArgsInstance() {
                return new prepare_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, prepare_args args) throws org.apache.thrift.TException {
                iface.prepare(args.ballotNumber, args.myId);
                return null;
            }
        }

        public static class ack<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ack_args> {
            public ack() {
                super("ack");
            }

            public ack_args getEmptyArgsInstance() {
                return new ack_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, ack_args args) throws org.apache.thrift.TException {
                iface.ack(args.ballotNumber, args.acceptedNumber, args.acceptedVal);
                return null;
            }
        }

        public static class accept<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accept_args> {
            public accept() {
                super("accept");
            }

            public accept_args getEmptyArgsInstance() {
                return new accept_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, accept_args args) throws org.apache.thrift.TException {
                iface.accept(args.ballotNumber, args.leaderVal);
                return null;
            }
        }

        public static class accepted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accepted_args> {
            public accepted() {
                super("accepted");
            }

            public accepted_args getEmptyArgsInstance() {
                return new accepted_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, accepted_args args) throws org.apache.thrift.TException {
                iface.accepted(args.ballotNumber, args.val);
                return null;
            }
        }

        public static class decide<I extends Iface> extends org.apache.thrift.ProcessFunction<I, decide_args> {
            public decide() {
                super("decide");
            }

            public decide_args getEmptyArgsInstance() {
                return new decide_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, decide_args args) throws org.apache.thrift.TException {
                iface.decide(args.ballotNumber, args.value);
                return null;
            }
        }

        public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
            public update() {
                super("update");
            }

            public update_args getEmptyArgsInstance() {
                return new update_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
                update_result result = new update_result();
                result.success = iface.update(args.lastAcceptedBallot);
                return result;
            }
        }

        public static class isLeader<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isLeader_args> {
            public isLeader() {
                super("isLeader");
            }

            public isLeader_args getEmptyArgsInstance() {
                return new isLeader_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public isLeader_result getResult(I iface, isLeader_args args) throws org.apache.thrift.TException {
                isLeader_result result = new isLeader_result();
                result.success = iface.isLeader();
                result.setSuccessIsSet(true);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("prepare", new prepare());
            processMap.put("ack", new ack());
            processMap.put("accept", new accept());
            processMap.put("accepted", new accepted());
            processMap.put("decide", new decide());
            processMap.put("update", new update());
            processMap.put("isLeader", new isLeader());
            return processMap;
        }

        public static class prepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prepare_args, Void> {
            public prepare() {
                super("prepare");
            }

            public prepare_args getEmptyArgsInstance() {
                return new prepare_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, prepare_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.prepare(args.ballotNumber, args.myId,resultHandler);
            }
        }

        public static class ack<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ack_args, Void> {
            public ack() {
                super("ack");
            }

            public ack_args getEmptyArgsInstance() {
                return new ack_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, ack_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.ack(args.ballotNumber, args.acceptedNumber, args.acceptedVal,resultHandler);
            }
        }

        public static class accept<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accept_args, Void> {
            public accept() {
                super("accept");
            }

            public accept_args getEmptyArgsInstance() {
                return new accept_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, accept_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.accept(args.ballotNumber, args.leaderVal,resultHandler);
            }
        }

        public static class accepted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accepted_args, Void> {
            public accepted() {
                super("accepted");
            }

            public accepted_args getEmptyArgsInstance() {
                return new accepted_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, accepted_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.accepted(args.ballotNumber, args.val,resultHandler);
            }
        }

        public static class decide<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, decide_args, Void> {
            public decide() {
                super("decide");
            }

            public decide_args getEmptyArgsInstance() {
                return new decide_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, decide_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.decide(args.ballotNumber, args.value,resultHandler);
            }
        }

        public static class update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_args, List<Long>> {
            public update() {
                super("update");
            }

            public update_args getEmptyArgsInstance() {
                return new update_args();
            }

            public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Long>>() {
                    public void onComplete(List<Long> o) {
                        update_result result = new update_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        update_result result = new update_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, update_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
                iface.update(args.lastAcceptedBallot,resultHandler);
            }
        }

        public static class isLeader<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isLeader_args, Boolean> {
            public isLeader() {
                super("isLeader");
            }

            public isLeader_args getEmptyArgsInstance() {
                return new isLeader_args();
            }

            public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Boolean>() {
                    public void onComplete(Boolean o) {
                        isLeader_result result = new isLeader_result();
                        result.success = o;
                        result.setSuccessIsSet(true);
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        isLeader_result result = new isLeader_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, isLeader_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
                iface.isLeader(resultHandler);
            }
        }

    }

    public static class prepare_args implements org.apache.thrift.TBase<prepare_args, prepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<prepare_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prepare_args");

        private static final org.apache.thrift.protocol.TField BALLOT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ballotNumber", org.apache.thrift.protocol.TType.I64, (short)1);
        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.I64, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new prepare_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new prepare_argsTupleSchemeFactory());
        }

        public long ballotNumber; // required
        public long myId; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BALLOT_NUMBER((short)1, "ballotNumber"),
            MY_ID((short)2, "myId");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // BALLOT_NUMBER
                        return BALLOT_NUMBER;
                    case 2: // MY_ID
                        return MY_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BALLOTNUMBER_ISSET_ID = 0;
        private static final int __MYID_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BALLOT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ballotNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prepare_args.class, metaDataMap);
        }

        public prepare_args() {
        }

        public prepare_args(
                long ballotNumber,
                long myId)
        {
            this();
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            this.myId = myId;
            setMyIdIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public prepare_args(prepare_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ballotNumber = other.ballotNumber;
            this.myId = other.myId;
        }

        public prepare_args deepCopy() {
            return new prepare_args(this);
        }

        @Override
        public void clear() {
            setBallotNumberIsSet(false);
            this.ballotNumber = 0;
            setMyIdIsSet(false);
            this.myId = 0;
        }

        public long getBallotNumber() {
            return this.ballotNumber;
        }

        public prepare_args setBallotNumber(long ballotNumber) {
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            return this;
        }

        public void unsetBallotNumber() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        /** Returns true if field ballotNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetBallotNumber() {
            return EncodingUtils.testBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        public void setBallotNumberIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID, value);
        }

        public long getMyId() {
            return this.myId;
        }

        public prepare_args setMyId(long myId) {
            this.myId = myId;
            setMyIdIsSet(true);
            return this;
        }

        public void unsetMyId() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYID_ISSET_ID);
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return EncodingUtils.testBit(__isset_bitfield, __MYID_ISSET_ID);
        }

        public void setMyIdIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYID_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BALLOT_NUMBER:
                    if (value == null) {
                        unsetBallotNumber();
                    } else {
                        setBallotNumber((Long)value);
                    }
                    break;

                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((Long)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BALLOT_NUMBER:
                    return Long.valueOf(getBallotNumber());

                case MY_ID:
                    return Long.valueOf(getMyId());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BALLOT_NUMBER:
                    return isSetBallotNumber();
                case MY_ID:
                    return isSetMyId();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof prepare_args)
                return this.equals((prepare_args)that);
            return false;
        }

        public boolean equals(prepare_args that) {
            if (that == null)
                return false;

            boolean this_present_ballotNumber = true;
            boolean that_present_ballotNumber = true;
            if (this_present_ballotNumber || that_present_ballotNumber) {
                if (!(this_present_ballotNumber && that_present_ballotNumber))
                    return false;
                if (this.ballotNumber != that.ballotNumber)
                    return false;
            }

            boolean this_present_myId = true;
            boolean that_present_myId = true;
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (this.myId != that.myId)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_ballotNumber = true;
            list.add(present_ballotNumber);
            if (present_ballotNumber)
                list.add(ballotNumber);

            boolean present_myId = true;
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            return list.hashCode();
        }

        @Override
        public int compareTo(prepare_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBallotNumber()).compareTo(other.isSetBallotNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBallotNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ballotNumber, other.ballotNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("prepare_args(");
            boolean first = true;

            sb.append("ballotNumber:");
            sb.append(this.ballotNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("myId:");
            sb.append(this.myId);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class prepare_argsStandardSchemeFactory implements SchemeFactory {
            public prepare_argsStandardScheme getScheme() {
                return new prepare_argsStandardScheme();
            }
        }

        private static class prepare_argsStandardScheme extends StandardScheme<prepare_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, prepare_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BALLOT_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.ballotNumber = iprot.readI64();
                                struct.setBallotNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.myId = iprot.readI64();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, prepare_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BALLOT_NUMBER_FIELD_DESC);
                oprot.writeI64(struct.ballotNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                oprot.writeI64(struct.myId);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class prepare_argsTupleSchemeFactory implements SchemeFactory {
            public prepare_argsTupleScheme getScheme() {
                return new prepare_argsTupleScheme();
            }
        }

        private static class prepare_argsTupleScheme extends TupleScheme<prepare_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, prepare_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetBallotNumber()) {
                    optionals.set(0);
                }
                if (struct.isSetMyId()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetBallotNumber()) {
                    oprot.writeI64(struct.ballotNumber);
                }
                if (struct.isSetMyId()) {
                    oprot.writeI64(struct.myId);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, prepare_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.ballotNumber = iprot.readI64();
                    struct.setBallotNumberIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.myId = iprot.readI64();
                    struct.setMyIdIsSet(true);
                }
            }
        }

    }

    public static class ack_args implements org.apache.thrift.TBase<ack_args, ack_args._Fields>, java.io.Serializable, Cloneable, Comparable<ack_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ack_args");

        private static final org.apache.thrift.protocol.TField BALLOT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ballotNumber", org.apache.thrift.protocol.TType.I64, (short)1);
        private static final org.apache.thrift.protocol.TField ACCEPTED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedNumber", org.apache.thrift.protocol.TType.I64, (short)2);
        private static final org.apache.thrift.protocol.TField ACCEPTED_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedVal", org.apache.thrift.protocol.TType.I64, (short)3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new ack_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new ack_argsTupleSchemeFactory());
        }

        public long ballotNumber; // required
        public long acceptedNumber; // required
        public long acceptedVal; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BALLOT_NUMBER((short)1, "ballotNumber"),
            ACCEPTED_NUMBER((short)2, "acceptedNumber"),
            ACCEPTED_VAL((short)3, "acceptedVal");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // BALLOT_NUMBER
                        return BALLOT_NUMBER;
                    case 2: // ACCEPTED_NUMBER
                        return ACCEPTED_NUMBER;
                    case 3: // ACCEPTED_VAL
                        return ACCEPTED_VAL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BALLOTNUMBER_ISSET_ID = 0;
        private static final int __ACCEPTEDNUMBER_ISSET_ID = 1;
        private static final int __ACCEPTEDVAL_ISSET_ID = 2;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BALLOT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ballotNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            tmpMap.put(_Fields.ACCEPTED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("acceptedNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            tmpMap.put(_Fields.ACCEPTED_VAL, new org.apache.thrift.meta_data.FieldMetaData("acceptedVal", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ack_args.class, metaDataMap);
        }

        public ack_args() {
        }

        public ack_args(
                long ballotNumber,
                long acceptedNumber,
                long acceptedVal)
        {
            this();
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            this.acceptedNumber = acceptedNumber;
            setAcceptedNumberIsSet(true);
            this.acceptedVal = acceptedVal;
            setAcceptedValIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public ack_args(ack_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ballotNumber = other.ballotNumber;
            this.acceptedNumber = other.acceptedNumber;
            this.acceptedVal = other.acceptedVal;
        }

        public ack_args deepCopy() {
            return new ack_args(this);
        }

        @Override
        public void clear() {
            setBallotNumberIsSet(false);
            this.ballotNumber = 0;
            setAcceptedNumberIsSet(false);
            this.acceptedNumber = 0;
            setAcceptedValIsSet(false);
            this.acceptedVal = 0;
        }

        public long getBallotNumber() {
            return this.ballotNumber;
        }

        public ack_args setBallotNumber(long ballotNumber) {
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            return this;
        }

        public void unsetBallotNumber() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        /** Returns true if field ballotNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetBallotNumber() {
            return EncodingUtils.testBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        public void setBallotNumberIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID, value);
        }

        public long getAcceptedNumber() {
            return this.acceptedNumber;
        }

        public ack_args setAcceptedNumber(long acceptedNumber) {
            this.acceptedNumber = acceptedNumber;
            setAcceptedNumberIsSet(true);
            return this;
        }

        public void unsetAcceptedNumber() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCEPTEDNUMBER_ISSET_ID);
        }

        /** Returns true if field acceptedNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetAcceptedNumber() {
            return EncodingUtils.testBit(__isset_bitfield, __ACCEPTEDNUMBER_ISSET_ID);
        }

        public void setAcceptedNumberIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCEPTEDNUMBER_ISSET_ID, value);
        }

        public long getAcceptedVal() {
            return this.acceptedVal;
        }

        public ack_args setAcceptedVal(long acceptedVal) {
            this.acceptedVal = acceptedVal;
            setAcceptedValIsSet(true);
            return this;
        }

        public void unsetAcceptedVal() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACCEPTEDVAL_ISSET_ID);
        }

        /** Returns true if field acceptedVal is set (has been assigned a value) and false otherwise */
        public boolean isSetAcceptedVal() {
            return EncodingUtils.testBit(__isset_bitfield, __ACCEPTEDVAL_ISSET_ID);
        }

        public void setAcceptedValIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACCEPTEDVAL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BALLOT_NUMBER:
                    if (value == null) {
                        unsetBallotNumber();
                    } else {
                        setBallotNumber((Long)value);
                    }
                    break;

                case ACCEPTED_NUMBER:
                    if (value == null) {
                        unsetAcceptedNumber();
                    } else {
                        setAcceptedNumber((Long)value);
                    }
                    break;

                case ACCEPTED_VAL:
                    if (value == null) {
                        unsetAcceptedVal();
                    } else {
                        setAcceptedVal((Long)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BALLOT_NUMBER:
                    return Long.valueOf(getBallotNumber());

                case ACCEPTED_NUMBER:
                    return Long.valueOf(getAcceptedNumber());

                case ACCEPTED_VAL:
                    return Long.valueOf(getAcceptedVal());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BALLOT_NUMBER:
                    return isSetBallotNumber();
                case ACCEPTED_NUMBER:
                    return isSetAcceptedNumber();
                case ACCEPTED_VAL:
                    return isSetAcceptedVal();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof ack_args)
                return this.equals((ack_args)that);
            return false;
        }

        public boolean equals(ack_args that) {
            if (that == null)
                return false;

            boolean this_present_ballotNumber = true;
            boolean that_present_ballotNumber = true;
            if (this_present_ballotNumber || that_present_ballotNumber) {
                if (!(this_present_ballotNumber && that_present_ballotNumber))
                    return false;
                if (this.ballotNumber != that.ballotNumber)
                    return false;
            }

            boolean this_present_acceptedNumber = true;
            boolean that_present_acceptedNumber = true;
            if (this_present_acceptedNumber || that_present_acceptedNumber) {
                if (!(this_present_acceptedNumber && that_present_acceptedNumber))
                    return false;
                if (this.acceptedNumber != that.acceptedNumber)
                    return false;
            }

            boolean this_present_acceptedVal = true;
            boolean that_present_acceptedVal = true;
            if (this_present_acceptedVal || that_present_acceptedVal) {
                if (!(this_present_acceptedVal && that_present_acceptedVal))
                    return false;
                if (this.acceptedVal != that.acceptedVal)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_ballotNumber = true;
            list.add(present_ballotNumber);
            if (present_ballotNumber)
                list.add(ballotNumber);

            boolean present_acceptedNumber = true;
            list.add(present_acceptedNumber);
            if (present_acceptedNumber)
                list.add(acceptedNumber);

            boolean present_acceptedVal = true;
            list.add(present_acceptedVal);
            if (present_acceptedVal)
                list.add(acceptedVal);

            return list.hashCode();
        }

        @Override
        public int compareTo(ack_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBallotNumber()).compareTo(other.isSetBallotNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBallotNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ballotNumber, other.ballotNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAcceptedNumber()).compareTo(other.isSetAcceptedNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAcceptedNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedNumber, other.acceptedNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAcceptedVal()).compareTo(other.isSetAcceptedVal());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAcceptedVal()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedVal, other.acceptedVal);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("ack_args(");
            boolean first = true;

            sb.append("ballotNumber:");
            sb.append(this.ballotNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("acceptedNumber:");
            sb.append(this.acceptedNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("acceptedVal:");
            sb.append(this.acceptedVal);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class ack_argsStandardSchemeFactory implements SchemeFactory {
            public ack_argsStandardScheme getScheme() {
                return new ack_argsStandardScheme();
            }
        }

        private static class ack_argsStandardScheme extends StandardScheme<ack_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, ack_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BALLOT_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.ballotNumber = iprot.readI64();
                                struct.setBallotNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // ACCEPTED_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.acceptedNumber = iprot.readI64();
                                struct.setAcceptedNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // ACCEPTED_VAL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.acceptedVal = iprot.readI64();
                                struct.setAcceptedValIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, ack_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BALLOT_NUMBER_FIELD_DESC);
                oprot.writeI64(struct.ballotNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ACCEPTED_NUMBER_FIELD_DESC);
                oprot.writeI64(struct.acceptedNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(ACCEPTED_VAL_FIELD_DESC);
                oprot.writeI64(struct.acceptedVal);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class ack_argsTupleSchemeFactory implements SchemeFactory {
            public ack_argsTupleScheme getScheme() {
                return new ack_argsTupleScheme();
            }
        }

        private static class ack_argsTupleScheme extends TupleScheme<ack_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, ack_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetBallotNumber()) {
                    optionals.set(0);
                }
                if (struct.isSetAcceptedNumber()) {
                    optionals.set(1);
                }
                if (struct.isSetAcceptedVal()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetBallotNumber()) {
                    oprot.writeI64(struct.ballotNumber);
                }
                if (struct.isSetAcceptedNumber()) {
                    oprot.writeI64(struct.acceptedNumber);
                }
                if (struct.isSetAcceptedVal()) {
                    oprot.writeI64(struct.acceptedVal);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, ack_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.ballotNumber = iprot.readI64();
                    struct.setBallotNumberIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.acceptedNumber = iprot.readI64();
                    struct.setAcceptedNumberIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.acceptedVal = iprot.readI64();
                    struct.setAcceptedValIsSet(true);
                }
            }
        }

    }

    public static class accept_args implements org.apache.thrift.TBase<accept_args, accept_args._Fields>, java.io.Serializable, Cloneable, Comparable<accept_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accept_args");

        private static final org.apache.thrift.protocol.TField BALLOT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ballotNumber", org.apache.thrift.protocol.TType.I64, (short)1);
        private static final org.apache.thrift.protocol.TField LEADER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderVal", org.apache.thrift.protocol.TType.I64, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new accept_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new accept_argsTupleSchemeFactory());
        }

        public long ballotNumber; // required
        public long leaderVal; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BALLOT_NUMBER((short)1, "ballotNumber"),
            LEADER_VAL((short)2, "leaderVal");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // BALLOT_NUMBER
                        return BALLOT_NUMBER;
                    case 2: // LEADER_VAL
                        return LEADER_VAL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BALLOTNUMBER_ISSET_ID = 0;
        private static final int __LEADERVAL_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BALLOT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ballotNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            tmpMap.put(_Fields.LEADER_VAL, new org.apache.thrift.meta_data.FieldMetaData("leaderVal", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accept_args.class, metaDataMap);
        }

        public accept_args() {
        }

        public accept_args(
                long ballotNumber,
                long leaderVal)
        {
            this();
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            this.leaderVal = leaderVal;
            setLeaderValIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public accept_args(accept_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ballotNumber = other.ballotNumber;
            this.leaderVal = other.leaderVal;
        }

        public accept_args deepCopy() {
            return new accept_args(this);
        }

        @Override
        public void clear() {
            setBallotNumberIsSet(false);
            this.ballotNumber = 0;
            setLeaderValIsSet(false);
            this.leaderVal = 0;
        }

        public long getBallotNumber() {
            return this.ballotNumber;
        }

        public accept_args setBallotNumber(long ballotNumber) {
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            return this;
        }

        public void unsetBallotNumber() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        /** Returns true if field ballotNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetBallotNumber() {
            return EncodingUtils.testBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        public void setBallotNumberIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID, value);
        }

        public long getLeaderVal() {
            return this.leaderVal;
        }

        public accept_args setLeaderVal(long leaderVal) {
            this.leaderVal = leaderVal;
            setLeaderValIsSet(true);
            return this;
        }

        public void unsetLeaderVal() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEADERVAL_ISSET_ID);
        }

        /** Returns true if field leaderVal is set (has been assigned a value) and false otherwise */
        public boolean isSetLeaderVal() {
            return EncodingUtils.testBit(__isset_bitfield, __LEADERVAL_ISSET_ID);
        }

        public void setLeaderValIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEADERVAL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BALLOT_NUMBER:
                    if (value == null) {
                        unsetBallotNumber();
                    } else {
                        setBallotNumber((Long)value);
                    }
                    break;

                case LEADER_VAL:
                    if (value == null) {
                        unsetLeaderVal();
                    } else {
                        setLeaderVal((Long)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BALLOT_NUMBER:
                    return Long.valueOf(getBallotNumber());

                case LEADER_VAL:
                    return Long.valueOf(getLeaderVal());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BALLOT_NUMBER:
                    return isSetBallotNumber();
                case LEADER_VAL:
                    return isSetLeaderVal();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof accept_args)
                return this.equals((accept_args)that);
            return false;
        }

        public boolean equals(accept_args that) {
            if (that == null)
                return false;

            boolean this_present_ballotNumber = true;
            boolean that_present_ballotNumber = true;
            if (this_present_ballotNumber || that_present_ballotNumber) {
                if (!(this_present_ballotNumber && that_present_ballotNumber))
                    return false;
                if (this.ballotNumber != that.ballotNumber)
                    return false;
            }

            boolean this_present_leaderVal = true;
            boolean that_present_leaderVal = true;
            if (this_present_leaderVal || that_present_leaderVal) {
                if (!(this_present_leaderVal && that_present_leaderVal))
                    return false;
                if (this.leaderVal != that.leaderVal)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_ballotNumber = true;
            list.add(present_ballotNumber);
            if (present_ballotNumber)
                list.add(ballotNumber);

            boolean present_leaderVal = true;
            list.add(present_leaderVal);
            if (present_leaderVal)
                list.add(leaderVal);

            return list.hashCode();
        }

        @Override
        public int compareTo(accept_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBallotNumber()).compareTo(other.isSetBallotNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBallotNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ballotNumber, other.ballotNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetLeaderVal()).compareTo(other.isSetLeaderVal());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLeaderVal()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderVal, other.leaderVal);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("accept_args(");
            boolean first = true;

            sb.append("ballotNumber:");
            sb.append(this.ballotNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("leaderVal:");
            sb.append(this.leaderVal);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class accept_argsStandardSchemeFactory implements SchemeFactory {
            public accept_argsStandardScheme getScheme() {
                return new accept_argsStandardScheme();
            }
        }

        private static class accept_argsStandardScheme extends StandardScheme<accept_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, accept_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BALLOT_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.ballotNumber = iprot.readI64();
                                struct.setBallotNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // LEADER_VAL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.leaderVal = iprot.readI64();
                                struct.setLeaderValIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, accept_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BALLOT_NUMBER_FIELD_DESC);
                oprot.writeI64(struct.ballotNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(LEADER_VAL_FIELD_DESC);
                oprot.writeI64(struct.leaderVal);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class accept_argsTupleSchemeFactory implements SchemeFactory {
            public accept_argsTupleScheme getScheme() {
                return new accept_argsTupleScheme();
            }
        }

        private static class accept_argsTupleScheme extends TupleScheme<accept_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, accept_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetBallotNumber()) {
                    optionals.set(0);
                }
                if (struct.isSetLeaderVal()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetBallotNumber()) {
                    oprot.writeI64(struct.ballotNumber);
                }
                if (struct.isSetLeaderVal()) {
                    oprot.writeI64(struct.leaderVal);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, accept_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.ballotNumber = iprot.readI64();
                    struct.setBallotNumberIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.leaderVal = iprot.readI64();
                    struct.setLeaderValIsSet(true);
                }
            }
        }

    }

    public static class accepted_args implements org.apache.thrift.TBase<accepted_args, accepted_args._Fields>, java.io.Serializable, Cloneable, Comparable<accepted_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accepted_args");

        private static final org.apache.thrift.protocol.TField BALLOT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ballotNumber", org.apache.thrift.protocol.TType.I64, (short)1);
        private static final org.apache.thrift.protocol.TField VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("val", org.apache.thrift.protocol.TType.I64, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new accepted_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new accepted_argsTupleSchemeFactory());
        }

        public long ballotNumber; // required
        public long val; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BALLOT_NUMBER((short)1, "ballotNumber"),
            VAL((short)2, "val");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // BALLOT_NUMBER
                        return BALLOT_NUMBER;
                    case 2: // VAL
                        return VAL;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BALLOTNUMBER_ISSET_ID = 0;
        private static final int __VAL_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BALLOT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ballotNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            tmpMap.put(_Fields.VAL, new org.apache.thrift.meta_data.FieldMetaData("val", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accepted_args.class, metaDataMap);
        }

        public accepted_args() {
        }

        public accepted_args(
                long ballotNumber,
                long val)
        {
            this();
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            this.val = val;
            setValIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public accepted_args(accepted_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ballotNumber = other.ballotNumber;
            this.val = other.val;
        }

        public accepted_args deepCopy() {
            return new accepted_args(this);
        }

        @Override
        public void clear() {
            setBallotNumberIsSet(false);
            this.ballotNumber = 0;
            setValIsSet(false);
            this.val = 0;
        }

        public long getBallotNumber() {
            return this.ballotNumber;
        }

        public accepted_args setBallotNumber(long ballotNumber) {
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            return this;
        }

        public void unsetBallotNumber() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        /** Returns true if field ballotNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetBallotNumber() {
            return EncodingUtils.testBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        public void setBallotNumberIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID, value);
        }

        public long getVal() {
            return this.val;
        }

        public accepted_args setVal(long val) {
            this.val = val;
            setValIsSet(true);
            return this;
        }

        public void unsetVal() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VAL_ISSET_ID);
        }

        /** Returns true if field val is set (has been assigned a value) and false otherwise */
        public boolean isSetVal() {
            return EncodingUtils.testBit(__isset_bitfield, __VAL_ISSET_ID);
        }

        public void setValIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VAL_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BALLOT_NUMBER:
                    if (value == null) {
                        unsetBallotNumber();
                    } else {
                        setBallotNumber((Long)value);
                    }
                    break;

                case VAL:
                    if (value == null) {
                        unsetVal();
                    } else {
                        setVal((Long)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BALLOT_NUMBER:
                    return Long.valueOf(getBallotNumber());

                case VAL:
                    return Long.valueOf(getVal());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BALLOT_NUMBER:
                    return isSetBallotNumber();
                case VAL:
                    return isSetVal();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof accepted_args)
                return this.equals((accepted_args)that);
            return false;
        }

        public boolean equals(accepted_args that) {
            if (that == null)
                return false;

            boolean this_present_ballotNumber = true;
            boolean that_present_ballotNumber = true;
            if (this_present_ballotNumber || that_present_ballotNumber) {
                if (!(this_present_ballotNumber && that_present_ballotNumber))
                    return false;
                if (this.ballotNumber != that.ballotNumber)
                    return false;
            }

            boolean this_present_val = true;
            boolean that_present_val = true;
            if (this_present_val || that_present_val) {
                if (!(this_present_val && that_present_val))
                    return false;
                if (this.val != that.val)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_ballotNumber = true;
            list.add(present_ballotNumber);
            if (present_ballotNumber)
                list.add(ballotNumber);

            boolean present_val = true;
            list.add(present_val);
            if (present_val)
                list.add(val);

            return list.hashCode();
        }

        @Override
        public int compareTo(accepted_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBallotNumber()).compareTo(other.isSetBallotNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBallotNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ballotNumber, other.ballotNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetVal()).compareTo(other.isSetVal());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetVal()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.val, other.val);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("accepted_args(");
            boolean first = true;

            sb.append("ballotNumber:");
            sb.append(this.ballotNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("val:");
            sb.append(this.val);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class accepted_argsStandardSchemeFactory implements SchemeFactory {
            public accepted_argsStandardScheme getScheme() {
                return new accepted_argsStandardScheme();
            }
        }

        private static class accepted_argsStandardScheme extends StandardScheme<accepted_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, accepted_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BALLOT_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.ballotNumber = iprot.readI64();
                                struct.setBallotNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // VAL
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.val = iprot.readI64();
                                struct.setValIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, accepted_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BALLOT_NUMBER_FIELD_DESC);
                oprot.writeI64(struct.ballotNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(VAL_FIELD_DESC);
                oprot.writeI64(struct.val);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class accepted_argsTupleSchemeFactory implements SchemeFactory {
            public accepted_argsTupleScheme getScheme() {
                return new accepted_argsTupleScheme();
            }
        }

        private static class accepted_argsTupleScheme extends TupleScheme<accepted_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, accepted_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetBallotNumber()) {
                    optionals.set(0);
                }
                if (struct.isSetVal()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetBallotNumber()) {
                    oprot.writeI64(struct.ballotNumber);
                }
                if (struct.isSetVal()) {
                    oprot.writeI64(struct.val);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, accepted_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.ballotNumber = iprot.readI64();
                    struct.setBallotNumberIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.val = iprot.readI64();
                    struct.setValIsSet(true);
                }
            }
        }

    }

    public static class decide_args implements org.apache.thrift.TBase<decide_args, decide_args._Fields>, java.io.Serializable, Cloneable, Comparable<decide_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("decide_args");

        private static final org.apache.thrift.protocol.TField BALLOT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ballotNumber", org.apache.thrift.protocol.TType.I64, (short)1);
        private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new decide_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new decide_argsTupleSchemeFactory());
        }

        public long ballotNumber; // required
        public long value; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            BALLOT_NUMBER((short)1, "ballotNumber"),
            VALUE((short)2, "value");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // BALLOT_NUMBER
                        return BALLOT_NUMBER;
                    case 2: // VALUE
                        return VALUE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __BALLOTNUMBER_ISSET_ID = 0;
        private static final int __VALUE_ISSET_ID = 1;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.BALLOT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ballotNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(decide_args.class, metaDataMap);
        }

        public decide_args() {
        }

        public decide_args(
                long ballotNumber,
                long value)
        {
            this();
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            this.value = value;
            setValueIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public decide_args(decide_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.ballotNumber = other.ballotNumber;
            this.value = other.value;
        }

        public decide_args deepCopy() {
            return new decide_args(this);
        }

        @Override
        public void clear() {
            setBallotNumberIsSet(false);
            this.ballotNumber = 0;
            setValueIsSet(false);
            this.value = 0;
        }

        public long getBallotNumber() {
            return this.ballotNumber;
        }

        public decide_args setBallotNumber(long ballotNumber) {
            this.ballotNumber = ballotNumber;
            setBallotNumberIsSet(true);
            return this;
        }

        public void unsetBallotNumber() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        /** Returns true if field ballotNumber is set (has been assigned a value) and false otherwise */
        public boolean isSetBallotNumber() {
            return EncodingUtils.testBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
        }

        public void setBallotNumberIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID, value);
        }

        public long getValue() {
            return this.value;
        }

        public decide_args setValue(long value) {
            this.value = value;
            setValueIsSet(true);
            return this;
        }

        public void unsetValue() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
        }

        /** Returns true if field value is set (has been assigned a value) and false otherwise */
        public boolean isSetValue() {
            return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
        }

        public void setValueIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case BALLOT_NUMBER:
                    if (value == null) {
                        unsetBallotNumber();
                    } else {
                        setBallotNumber((Long)value);
                    }
                    break;

                case VALUE:
                    if (value == null) {
                        unsetValue();
                    } else {
                        setValue((Long)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case BALLOT_NUMBER:
                    return Long.valueOf(getBallotNumber());

                case VALUE:
                    return Long.valueOf(getValue());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case BALLOT_NUMBER:
                    return isSetBallotNumber();
                case VALUE:
                    return isSetValue();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof decide_args)
                return this.equals((decide_args)that);
            return false;
        }

        public boolean equals(decide_args that) {
            if (that == null)
                return false;

            boolean this_present_ballotNumber = true;
            boolean that_present_ballotNumber = true;
            if (this_present_ballotNumber || that_present_ballotNumber) {
                if (!(this_present_ballotNumber && that_present_ballotNumber))
                    return false;
                if (this.ballotNumber != that.ballotNumber)
                    return false;
            }

            boolean this_present_value = true;
            boolean that_present_value = true;
            if (this_present_value || that_present_value) {
                if (!(this_present_value && that_present_value))
                    return false;
                if (this.value != that.value)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_ballotNumber = true;
            list.add(present_ballotNumber);
            if (present_ballotNumber)
                list.add(ballotNumber);

            boolean present_value = true;
            list.add(present_value);
            if (present_value)
                list.add(value);

            return list.hashCode();
        }

        @Override
        public int compareTo(decide_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetBallotNumber()).compareTo(other.isSetBallotNumber());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetBallotNumber()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ballotNumber, other.ballotNumber);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("decide_args(");
            boolean first = true;

            sb.append("ballotNumber:");
            sb.append(this.ballotNumber);
            first = false;
            if (!first) sb.append(", ");
            sb.append("value:");
            sb.append(this.value);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class decide_argsStandardSchemeFactory implements SchemeFactory {
            public decide_argsStandardScheme getScheme() {
                return new decide_argsStandardScheme();
            }
        }

        private static class decide_argsStandardScheme extends StandardScheme<decide_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, decide_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // BALLOT_NUMBER
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.ballotNumber = iprot.readI64();
                                struct.setBallotNumberIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // VALUE
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.value = iprot.readI64();
                                struct.setValueIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, decide_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(BALLOT_NUMBER_FIELD_DESC);
                oprot.writeI64(struct.ballotNumber);
                oprot.writeFieldEnd();
                oprot.writeFieldBegin(VALUE_FIELD_DESC);
                oprot.writeI64(struct.value);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class decide_argsTupleSchemeFactory implements SchemeFactory {
            public decide_argsTupleScheme getScheme() {
                return new decide_argsTupleScheme();
            }
        }

        private static class decide_argsTupleScheme extends TupleScheme<decide_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, decide_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetBallotNumber()) {
                    optionals.set(0);
                }
                if (struct.isSetValue()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetBallotNumber()) {
                    oprot.writeI64(struct.ballotNumber);
                }
                if (struct.isSetValue()) {
                    oprot.writeI64(struct.value);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, decide_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.ballotNumber = iprot.readI64();
                    struct.setBallotNumberIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.value = iprot.readI64();
                    struct.setValueIsSet(true);
                }
            }
        }

    }

    public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

        private static final org.apache.thrift.protocol.TField LAST_ACCEPTED_BALLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAcceptedBallot", org.apache.thrift.protocol.TType.I64, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
        }

        public long lastAcceptedBallot; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            LAST_ACCEPTED_BALLOT((short)1, "lastAcceptedBallot");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // LAST_ACCEPTED_BALLOT
                        return LAST_ACCEPTED_BALLOT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __LASTACCEPTEDBALLOT_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LAST_ACCEPTED_BALLOT, new org.apache.thrift.meta_data.FieldMetaData("lastAcceptedBallot", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
        }

        public update_args() {
        }

        public update_args(
                long lastAcceptedBallot)
        {
            this();
            this.lastAcceptedBallot = lastAcceptedBallot;
            setLastAcceptedBallotIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public update_args(update_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.lastAcceptedBallot = other.lastAcceptedBallot;
        }

        public update_args deepCopy() {
            return new update_args(this);
        }

        @Override
        public void clear() {
            setLastAcceptedBallotIsSet(false);
            this.lastAcceptedBallot = 0;
        }

        public long getLastAcceptedBallot() {
            return this.lastAcceptedBallot;
        }

        public update_args setLastAcceptedBallot(long lastAcceptedBallot) {
            this.lastAcceptedBallot = lastAcceptedBallot;
            setLastAcceptedBallotIsSet(true);
            return this;
        }

        public void unsetLastAcceptedBallot() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACCEPTEDBALLOT_ISSET_ID);
        }

        /** Returns true if field lastAcceptedBallot is set (has been assigned a value) and false otherwise */
        public boolean isSetLastAcceptedBallot() {
            return EncodingUtils.testBit(__isset_bitfield, __LASTACCEPTEDBALLOT_ISSET_ID);
        }

        public void setLastAcceptedBallotIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACCEPTEDBALLOT_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case LAST_ACCEPTED_BALLOT:
                    if (value == null) {
                        unsetLastAcceptedBallot();
                    } else {
                        setLastAcceptedBallot((Long)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case LAST_ACCEPTED_BALLOT:
                    return Long.valueOf(getLastAcceptedBallot());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case LAST_ACCEPTED_BALLOT:
                    return isSetLastAcceptedBallot();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof update_args)
                return this.equals((update_args)that);
            return false;
        }

        public boolean equals(update_args that) {
            if (that == null)
                return false;

            boolean this_present_lastAcceptedBallot = true;
            boolean that_present_lastAcceptedBallot = true;
            if (this_present_lastAcceptedBallot || that_present_lastAcceptedBallot) {
                if (!(this_present_lastAcceptedBallot && that_present_lastAcceptedBallot))
                    return false;
                if (this.lastAcceptedBallot != that.lastAcceptedBallot)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_lastAcceptedBallot = true;
            list.add(present_lastAcceptedBallot);
            if (present_lastAcceptedBallot)
                list.add(lastAcceptedBallot);

            return list.hashCode();
        }

        @Override
        public int compareTo(update_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetLastAcceptedBallot()).compareTo(other.isSetLastAcceptedBallot());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLastAcceptedBallot()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAcceptedBallot, other.lastAcceptedBallot);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("update_args(");
            boolean first = true;

            sb.append("lastAcceptedBallot:");
            sb.append(this.lastAcceptedBallot);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class update_argsStandardSchemeFactory implements SchemeFactory {
            public update_argsStandardScheme getScheme() {
                return new update_argsStandardScheme();
            }
        }

        private static class update_argsStandardScheme extends StandardScheme<update_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // LAST_ACCEPTED_BALLOT
                            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                                struct.lastAcceptedBallot = iprot.readI64();
                                struct.setLastAcceptedBallotIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(LAST_ACCEPTED_BALLOT_FIELD_DESC);
                oprot.writeI64(struct.lastAcceptedBallot);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class update_argsTupleSchemeFactory implements SchemeFactory {
            public update_argsTupleScheme getScheme() {
                return new update_argsTupleScheme();
            }
        }

        private static class update_argsTupleScheme extends TupleScheme<update_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLastAcceptedBallot()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLastAcceptedBallot()) {
                    oprot.writeI64(struct.lastAcceptedBallot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.lastAcceptedBallot = iprot.readI64();
                    struct.setLastAcceptedBallotIsSet(true);
                }
            }
        }

    }

    public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
        }

        public List<Long> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64              , "int"))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
        }

        public update_result() {
        }

        public update_result(
                List<Long> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public update_result(update_result other) {
            if (other.isSetSuccess()) {
                List<Long> __this__success = new ArrayList<Long>(other.success.size());
                for (Long other_element : other.success) {
                    __this__success.add(other_element);
                }
                this.success = __this__success;
            }
        }

        public update_result deepCopy() {
            return new update_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Long> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(long elem) {
            if (this.success == null) {
                this.success = new ArrayList<Long>();
            }
            this.success.add(elem);
        }

        public List<Long> getSuccess() {
            return this.success;
        }

        public update_result setSuccess(List<Long> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Long>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof update_result)
                return this.equals((update_result)that);
            return false;
        }

        public boolean equals(update_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(update_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("update_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class update_resultStandardSchemeFactory implements SchemeFactory {
            public update_resultStandardScheme getScheme() {
                return new update_resultStandardScheme();
            }
        }

        private static class update_resultStandardScheme extends StandardScheme<update_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new ArrayList<Long>(_list0.size);
                                    long _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                    {
                                        _elem1 = iprot.readI64();
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
                        for (long _iter3 : struct.success)
                        {
                            oprot.writeI64(_iter3);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class update_resultTupleSchemeFactory implements SchemeFactory {
            public update_resultTupleScheme getScheme() {
                return new update_resultTupleScheme();
            }
        }

        private static class update_resultTupleScheme extends TupleScheme<update_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (long _iter4 : struct.success)
                        {
                            oprot.writeI64(_iter4);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
                        struct.success = new ArrayList<Long>(_list5.size);
                        long _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                        {
                            _elem6 = iprot.readI64();
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

    public static class isLeader_args implements org.apache.thrift.TBase<isLeader_args, isLeader_args._Fields>, java.io.Serializable, Cloneable, Comparable<isLeader_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isLeader_args");


        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new isLeader_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isLeader_argsTupleSchemeFactory());
        }


        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            ;

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isLeader_args.class, metaDataMap);
        }

        public isLeader_args() {
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isLeader_args(isLeader_args other) {
        }

        public isLeader_args deepCopy() {
            return new isLeader_args(this);
        }

        @Override
        public void clear() {
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isLeader_args)
                return this.equals((isLeader_args)that);
            return false;
        }

        public boolean equals(isLeader_args that) {
            if (that == null)
                return false;

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            return list.hashCode();
        }

        @Override
        public int compareTo(isLeader_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isLeader_args(");
            boolean first = true;

            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isLeader_argsStandardSchemeFactory implements SchemeFactory {
            public isLeader_argsStandardScheme getScheme() {
                return new isLeader_argsStandardScheme();
            }
        }

        private static class isLeader_argsStandardScheme extends StandardScheme<isLeader_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isLeader_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isLeader_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isLeader_argsTupleSchemeFactory implements SchemeFactory {
            public isLeader_argsTupleScheme getScheme() {
                return new isLeader_argsTupleScheme();
            }
        }

        private static class isLeader_argsTupleScheme extends TupleScheme<isLeader_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isLeader_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isLeader_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
            }
        }

    }

    public static class isLeader_result implements org.apache.thrift.TBase<isLeader_result, isLeader_result._Fields>, java.io.Serializable, Cloneable, Comparable<isLeader_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isLeader_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new isLeader_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new isLeader_resultTupleSchemeFactory());
        }

        public boolean success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __SUCCESS_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isLeader_result.class, metaDataMap);
        }

        public isLeader_result() {
        }

        public isLeader_result(
                boolean success)
        {
            this();
            this.success = success;
            setSuccessIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public isLeader_result(isLeader_result other) {
            __isset_bitfield = other.__isset_bitfield;
            this.success = other.success;
        }

        public isLeader_result deepCopy() {
            return new isLeader_result(this);
        }

        @Override
        public void clear() {
            setSuccessIsSet(false);
            this.success = false;
        }

        public boolean isSuccess() {
            return this.success;
        }

        public isLeader_result setSuccess(boolean success) {
            this.success = success;
            setSuccessIsSet(true);
            return this;
        }

        public void unsetSuccess() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
        }

        public void setSuccessIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((Boolean)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return Boolean.valueOf(isSuccess());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof isLeader_result)
                return this.equals((isLeader_result)that);
            return false;
        }

        public boolean equals(isLeader_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true;
            boolean that_present_success = true;
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (this.success != that.success)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true;
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(isLeader_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("isLeader_result(");
            boolean first = true;

            sb.append("success:");
            sb.append(this.success);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class isLeader_resultStandardSchemeFactory implements SchemeFactory {
            public isLeader_resultStandardScheme getScheme() {
                return new isLeader_resultStandardScheme();
            }
        }

        private static class isLeader_resultStandardScheme extends StandardScheme<isLeader_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, isLeader_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                                struct.success = iprot.readBool();
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, isLeader_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.isSetSuccess()) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    oprot.writeBool(struct.success);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class isLeader_resultTupleSchemeFactory implements SchemeFactory {
            public isLeader_resultTupleScheme getScheme() {
                return new isLeader_resultTupleScheme();
            }
        }

        private static class isLeader_resultTupleScheme extends TupleScheme<isLeader_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, isLeader_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    oprot.writeBool(struct.success);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, isLeader_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.success = iprot.readBool();
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
