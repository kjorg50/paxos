/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsb.cs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-10")
public class Ballot {

    public interface Iface {

        /**
         * ThriftProposalID == (int ballotNumber, string uid) *
         *
         * @param myId
         * @param propID
         */
        public void prepare(String myId, ThriftProposalID propID) throws org.apache.thrift.TException;

        public void promise(String myId, ThriftProposalID propID, ThriftProposalID prevPropId, Transaction acceptedValue) throws org.apache.thrift.TException;

        public void accept(String myId, ThriftProposalID propID, Transaction acceptedValue) throws org.apache.thrift.TException;

        public void accepted(String myId, ThriftProposalID propID, Transaction acceptedValue) throws org.apache.thrift.TException;

        public void prepareNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID) throws org.apache.thrift.TException;

        public void acceptNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID) throws org.apache.thrift.TException;

        public void heartbeat(String myId, ThriftProposalID leaderPropID) throws org.apache.thrift.TException;

        public List<Transaction> update(int lastAcceptedBallot) throws org.apache.thrift.TException;

    }

    public interface AsyncIface {

        public void prepare(String myId, ThriftProposalID propID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void promise(String myId, ThriftProposalID propID, ThriftProposalID prevPropId, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void accept(String myId, ThriftProposalID propID, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void accepted(String myId, ThriftProposalID propID, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void prepareNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void acceptNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void heartbeat(String myId, ThriftProposalID leaderPropID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

        public void update(int lastAcceptedBallot, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    }

    public static class Client extends org.apache.thrift.TServiceClient implements Iface {
        public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
            public Factory() {}
            public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
                return new Client(prot);
            }
            public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
                return new Client(iprot, oprot);
            }
        }

        public Client(org.apache.thrift.protocol.TProtocol prot)
        {
            super(prot, prot);
        }

        public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
            super(iprot, oprot);
        }

        public void prepare(String myId, ThriftProposalID propID) throws org.apache.thrift.TException
        {
            send_prepare(myId, propID);
        }

        public void send_prepare(String myId, ThriftProposalID propID) throws org.apache.thrift.TException
        {
            prepare_args args = new prepare_args();
            args.setMyId(myId);
            args.setPropID(propID);
            sendBase("prepare", args);
        }

        public void promise(String myId, ThriftProposalID propID, ThriftProposalID prevPropId, Transaction acceptedValue) throws org.apache.thrift.TException
        {
            send_promise(myId, propID, prevPropId, acceptedValue);
        }

        public void send_promise(String myId, ThriftProposalID propID, ThriftProposalID prevPropId, Transaction acceptedValue) throws org.apache.thrift.TException
        {
            promise_args args = new promise_args();
            args.setMyId(myId);
            args.setPropID(propID);
            args.setPrevPropId(prevPropId);
            args.setAcceptedValue(acceptedValue);
            sendBase("promise", args);
        }

        public void accept(String myId, ThriftProposalID propID, Transaction acceptedValue) throws org.apache.thrift.TException
        {
            send_accept(myId, propID, acceptedValue);
        }

        public void send_accept(String myId, ThriftProposalID propID, Transaction acceptedValue) throws org.apache.thrift.TException
        {
            accept_args args = new accept_args();
            args.setMyId(myId);
            args.setPropID(propID);
            args.setAcceptedValue(acceptedValue);
            sendBase("accept", args);
        }

        public void accepted(String myId, ThriftProposalID propID, Transaction acceptedValue) throws org.apache.thrift.TException
        {
            send_accepted(myId, propID, acceptedValue);
        }

        public void send_accepted(String myId, ThriftProposalID propID, Transaction acceptedValue) throws org.apache.thrift.TException
        {
            accepted_args args = new accepted_args();
            args.setMyId(myId);
            args.setPropID(propID);
            args.setAcceptedValue(acceptedValue);
            sendBase("accepted", args);
        }

        public void prepareNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID) throws org.apache.thrift.TException
        {
            send_prepareNACK(myId, propID, promisedID);
        }

        public void send_prepareNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID) throws org.apache.thrift.TException
        {
            prepareNACK_args args = new prepareNACK_args();
            args.setMyId(myId);
            args.setPropID(propID);
            args.setPromisedID(promisedID);
            sendBase("prepareNACK", args);
        }

        public void acceptNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID) throws org.apache.thrift.TException
        {
            send_acceptNACK(myId, propID, promisedID);
        }

        public void send_acceptNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID) throws org.apache.thrift.TException
        {
            acceptNACK_args args = new acceptNACK_args();
            args.setMyId(myId);
            args.setPropID(propID);
            args.setPromisedID(promisedID);
            sendBase("acceptNACK", args);
        }

        public void heartbeat(String myId, ThriftProposalID leaderPropID) throws org.apache.thrift.TException
        {
            send_heartbeat(myId, leaderPropID);
        }

        public void send_heartbeat(String myId, ThriftProposalID leaderPropID) throws org.apache.thrift.TException
        {
            heartbeat_args args = new heartbeat_args();
            args.setMyId(myId);
            args.setLeaderPropID(leaderPropID);
            sendBase("heartbeat", args);
        }

        public List<Transaction> update(int lastAcceptedBallot) throws org.apache.thrift.TException
        {
            send_update(lastAcceptedBallot);
            return recv_update();
        }

        public void send_update(int lastAcceptedBallot) throws org.apache.thrift.TException
        {
            update_args args = new update_args();
            args.setLastAcceptedBallot(lastAcceptedBallot);
            sendBase("update", args);
        }

        public List<Transaction> recv_update() throws org.apache.thrift.TException
        {
            update_result result = new update_result();
            receiveBase(result, "update");
            if (result.isSetSuccess()) {
                return result.success;
            }
            throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "update failed: unknown result");
        }

    }
    public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
        public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
            private org.apache.thrift.async.TAsyncClientManager clientManager;
            private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
            public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
                this.clientManager = clientManager;
                this.protocolFactory = protocolFactory;
            }
            public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
                return new AsyncClient(protocolFactory, clientManager, transport);
            }
        }

        public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
            super(protocolFactory, clientManager, transport);
        }

        public void prepare(String myId, ThriftProposalID propID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            prepare_call method_call = new prepare_call(myId, propID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class prepare_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String myId;
            private ThriftProposalID propID;
            public prepare_call(String myId, ThriftProposalID propID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.myId = myId;
                this.propID = propID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prepare", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                prepare_args args = new prepare_args();
                args.setMyId(myId);
                args.setPropID(propID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void promise(String myId, ThriftProposalID propID, ThriftProposalID prevPropId, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            promise_call method_call = new promise_call(myId, propID, prevPropId, acceptedValue, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class promise_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String myId;
            private ThriftProposalID propID;
            private ThriftProposalID prevPropId;
            private Transaction acceptedValue;
            public promise_call(String myId, ThriftProposalID propID, ThriftProposalID prevPropId, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.myId = myId;
                this.propID = propID;
                this.prevPropId = prevPropId;
                this.acceptedValue = acceptedValue;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("promise", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                promise_args args = new promise_args();
                args.setMyId(myId);
                args.setPropID(propID);
                args.setPrevPropId(prevPropId);
                args.setAcceptedValue(acceptedValue);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void accept(String myId, ThriftProposalID propID, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            accept_call method_call = new accept_call(myId, propID, acceptedValue, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class accept_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String myId;
            private ThriftProposalID propID;
            private Transaction acceptedValue;
            public accept_call(String myId, ThriftProposalID propID, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.myId = myId;
                this.propID = propID;
                this.acceptedValue = acceptedValue;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accept", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                accept_args args = new accept_args();
                args.setMyId(myId);
                args.setPropID(propID);
                args.setAcceptedValue(acceptedValue);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void accepted(String myId, ThriftProposalID propID, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            accepted_call method_call = new accepted_call(myId, propID, acceptedValue, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class accepted_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String myId;
            private ThriftProposalID propID;
            private Transaction acceptedValue;
            public accepted_call(String myId, ThriftProposalID propID, Transaction acceptedValue, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.myId = myId;
                this.propID = propID;
                this.acceptedValue = acceptedValue;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("accepted", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                accepted_args args = new accepted_args();
                args.setMyId(myId);
                args.setPropID(propID);
                args.setAcceptedValue(acceptedValue);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void prepareNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            prepareNACK_call method_call = new prepareNACK_call(myId, propID, promisedID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class prepareNACK_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String myId;
            private ThriftProposalID propID;
            private ThriftProposalID promisedID;
            public prepareNACK_call(String myId, ThriftProposalID propID, ThriftProposalID promisedID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.myId = myId;
                this.propID = propID;
                this.promisedID = promisedID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("prepareNACK", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                prepareNACK_args args = new prepareNACK_args();
                args.setMyId(myId);
                args.setPropID(propID);
                args.setPromisedID(promisedID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void acceptNACK(String myId, ThriftProposalID propID, ThriftProposalID promisedID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            acceptNACK_call method_call = new acceptNACK_call(myId, propID, promisedID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class acceptNACK_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String myId;
            private ThriftProposalID propID;
            private ThriftProposalID promisedID;
            public acceptNACK_call(String myId, ThriftProposalID propID, ThriftProposalID promisedID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.myId = myId;
                this.propID = propID;
                this.promisedID = promisedID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("acceptNACK", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                acceptNACK_args args = new acceptNACK_args();
                args.setMyId(myId);
                args.setPropID(propID);
                args.setPromisedID(promisedID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void heartbeat(String myId, ThriftProposalID leaderPropID, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            heartbeat_call method_call = new heartbeat_call(myId, leaderPropID, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class heartbeat_call extends org.apache.thrift.async.TAsyncMethodCall {
            private String myId;
            private ThriftProposalID leaderPropID;
            public heartbeat_call(String myId, ThriftProposalID leaderPropID, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, true);
                this.myId = myId;
                this.leaderPropID = leaderPropID;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("heartbeat", org.apache.thrift.protocol.TMessageType.ONEWAY, 0));
                heartbeat_args args = new heartbeat_args();
                args.setMyId(myId);
                args.setLeaderPropID(leaderPropID);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public void getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
            }
        }

        public void update(int lastAcceptedBallot, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
            checkReady();
            update_call method_call = new update_call(lastAcceptedBallot, resultHandler, this, ___protocolFactory, ___transport);
            this.___currentMethod = method_call;
            ___manager.call(method_call);
        }

        public static class update_call extends org.apache.thrift.async.TAsyncMethodCall {
            private int lastAcceptedBallot;
            public update_call(int lastAcceptedBallot, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
                super(client, protocolFactory, transport, resultHandler, false);
                this.lastAcceptedBallot = lastAcceptedBallot;
            }

            public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
                prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("update", org.apache.thrift.protocol.TMessageType.CALL, 0));
                update_args args = new update_args();
                args.setLastAcceptedBallot(lastAcceptedBallot);
                args.write(prot);
                prot.writeMessageEnd();
            }

            public List<Transaction> getResult() throws org.apache.thrift.TException {
                if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
                    throw new IllegalStateException("Method call not finished!");
                }
                org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
                org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
                return (new Client(prot)).recv_update();
            }
        }

    }

    public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
        private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
        public Processor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
        }

        protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
            processMap.put("prepare", new prepare());
            processMap.put("promise", new promise());
            processMap.put("accept", new accept());
            processMap.put("accepted", new accepted());
            processMap.put("prepareNACK", new prepareNACK());
            processMap.put("acceptNACK", new acceptNACK());
            processMap.put("heartbeat", new heartbeat());
            processMap.put("update", new update());
            return processMap;
        }

        public static class prepare<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prepare_args> {
            public prepare() {
                super("prepare");
            }

            public prepare_args getEmptyArgsInstance() {
                return new prepare_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, prepare_args args) throws org.apache.thrift.TException {
                iface.prepare(args.myId, args.propID);
                return null;
            }
        }

        public static class promise<I extends Iface> extends org.apache.thrift.ProcessFunction<I, promise_args> {
            public promise() {
                super("promise");
            }

            public promise_args getEmptyArgsInstance() {
                return new promise_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, promise_args args) throws org.apache.thrift.TException {
                iface.promise(args.myId, args.propID, args.prevPropId, args.acceptedValue);
                return null;
            }
        }

        public static class accept<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accept_args> {
            public accept() {
                super("accept");
            }

            public accept_args getEmptyArgsInstance() {
                return new accept_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, accept_args args) throws org.apache.thrift.TException {
                iface.accept(args.myId, args.propID, args.acceptedValue);
                return null;
            }
        }

        public static class accepted<I extends Iface> extends org.apache.thrift.ProcessFunction<I, accepted_args> {
            public accepted() {
                super("accepted");
            }

            public accepted_args getEmptyArgsInstance() {
                return new accepted_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, accepted_args args) throws org.apache.thrift.TException {
                iface.accepted(args.myId, args.propID, args.acceptedValue);
                return null;
            }
        }

        public static class prepareNACK<I extends Iface> extends org.apache.thrift.ProcessFunction<I, prepareNACK_args> {
            public prepareNACK() {
                super("prepareNACK");
            }

            public prepareNACK_args getEmptyArgsInstance() {
                return new prepareNACK_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, prepareNACK_args args) throws org.apache.thrift.TException {
                iface.prepareNACK(args.myId, args.propID, args.promisedID);
                return null;
            }
        }

        public static class acceptNACK<I extends Iface> extends org.apache.thrift.ProcessFunction<I, acceptNACK_args> {
            public acceptNACK() {
                super("acceptNACK");
            }

            public acceptNACK_args getEmptyArgsInstance() {
                return new acceptNACK_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, acceptNACK_args args) throws org.apache.thrift.TException {
                iface.acceptNACK(args.myId, args.propID, args.promisedID);
                return null;
            }
        }

        public static class heartbeat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, heartbeat_args> {
            public heartbeat() {
                super("heartbeat");
            }

            public heartbeat_args getEmptyArgsInstance() {
                return new heartbeat_args();
            }

            protected boolean isOneway() {
                return true;
            }

            public org.apache.thrift.TBase getResult(I iface, heartbeat_args args) throws org.apache.thrift.TException {
                iface.heartbeat(args.myId, args.leaderPropID);
                return null;
            }
        }

        public static class update<I extends Iface> extends org.apache.thrift.ProcessFunction<I, update_args> {
            public update() {
                super("update");
            }

            public update_args getEmptyArgsInstance() {
                return new update_args();
            }

            protected boolean isOneway() {
                return false;
            }

            public update_result getResult(I iface, update_args args) throws org.apache.thrift.TException {
                update_result result = new update_result();
                result.success = iface.update(args.lastAcceptedBallot);
                return result;
            }
        }

    }

    public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
        private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
        public AsyncProcessor(I iface) {
            super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
        }

        protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            super(iface, getProcessMap(processMap));
        }

        private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
            processMap.put("prepare", new prepare());
            processMap.put("promise", new promise());
            processMap.put("accept", new accept());
            processMap.put("accepted", new accepted());
            processMap.put("prepareNACK", new prepareNACK());
            processMap.put("acceptNACK", new acceptNACK());
            processMap.put("heartbeat", new heartbeat());
            processMap.put("update", new update());
            return processMap;
        }

        public static class prepare<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prepare_args, Void> {
            public prepare() {
                super("prepare");
            }

            public prepare_args getEmptyArgsInstance() {
                return new prepare_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, prepare_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.prepare(args.myId, args.propID,resultHandler);
            }
        }

        public static class promise<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, promise_args, Void> {
            public promise() {
                super("promise");
            }

            public promise_args getEmptyArgsInstance() {
                return new promise_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, promise_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.promise(args.myId, args.propID, args.prevPropId, args.acceptedValue,resultHandler);
            }
        }

        public static class accept<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accept_args, Void> {
            public accept() {
                super("accept");
            }

            public accept_args getEmptyArgsInstance() {
                return new accept_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, accept_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.accept(args.myId, args.propID, args.acceptedValue,resultHandler);
            }
        }

        public static class accepted<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, accepted_args, Void> {
            public accepted() {
                super("accepted");
            }

            public accepted_args getEmptyArgsInstance() {
                return new accepted_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, accepted_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.accepted(args.myId, args.propID, args.acceptedValue,resultHandler);
            }
        }

        public static class prepareNACK<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, prepareNACK_args, Void> {
            public prepareNACK() {
                super("prepareNACK");
            }

            public prepareNACK_args getEmptyArgsInstance() {
                return new prepareNACK_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, prepareNACK_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.prepareNACK(args.myId, args.propID, args.promisedID,resultHandler);
            }
        }

        public static class acceptNACK<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, acceptNACK_args, Void> {
            public acceptNACK() {
                super("acceptNACK");
            }

            public acceptNACK_args getEmptyArgsInstance() {
                return new acceptNACK_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, acceptNACK_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.acceptNACK(args.myId, args.propID, args.promisedID,resultHandler);
            }
        }

        public static class heartbeat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, heartbeat_args, Void> {
            public heartbeat() {
                super("heartbeat");
            }

            public heartbeat_args getEmptyArgsInstance() {
                return new heartbeat_args();
            }

            public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<Void>() {
                    public void onComplete(Void o) {
                    }
                    public void onError(Exception e) {
                    }
                };
            }

            protected boolean isOneway() {
                return true;
            }

            public void start(I iface, heartbeat_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
                iface.heartbeat(args.myId, args.leaderPropID,resultHandler);
            }
        }

        public static class update<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, update_args, List<Transaction>> {
            public update() {
                super("update");
            }

            public update_args getEmptyArgsInstance() {
                return new update_args();
            }

            public AsyncMethodCallback<List<Transaction>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
                final org.apache.thrift.AsyncProcessFunction fcall = this;
                return new AsyncMethodCallback<List<Transaction>>() {
                    public void onComplete(List<Transaction> o) {
                        update_result result = new update_result();
                        result.success = o;
                        try {
                            fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
                            return;
                        } catch (Exception e) {
                            LOGGER.error("Exception writing to internal frame buffer", e);
                        }
                        fb.close();
                    }
                    public void onError(Exception e) {
                        byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
                        org.apache.thrift.TBase msg;
                        update_result result = new update_result();
                        {
                            msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
                            msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
                        }
                        try {
                            fcall.sendResponse(fb,msg,msgType,seqid);
                            return;
                        } catch (Exception ex) {
                            LOGGER.error("Exception writing to internal frame buffer", ex);
                        }
                        fb.close();
                    }
                };
            }

            protected boolean isOneway() {
                return false;
            }

            public void start(I iface, update_args args, org.apache.thrift.async.AsyncMethodCallback<List<Transaction>> resultHandler) throws TException {
                iface.update(args.lastAcceptedBallot,resultHandler);
            }
        }

    }

    public static class prepare_args implements org.apache.thrift.TBase<prepare_args, prepare_args._Fields>, java.io.Serializable, Cloneable, Comparable<prepare_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prepare_args");

        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("propID", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new prepare_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new prepare_argsTupleSchemeFactory());
        }

        public String myId; // required
        public ThriftProposalID propID; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MY_ID((short)1, "myId"),
            PROP_ID((short)2, "propID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // PROP_ID
                        return PROP_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("propID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prepare_args.class, metaDataMap);
        }

        public prepare_args() {
        }

        public prepare_args(
                String myId,
                ThriftProposalID propID)
        {
            this();
            this.myId = myId;
            this.propID = propID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public prepare_args(prepare_args other) {
            if (other.isSetMyId()) {
                this.myId = other.myId;
            }
            if (other.isSetPropID()) {
                this.propID = new ThriftProposalID(other.propID);
            }
        }

        public prepare_args deepCopy() {
            return new prepare_args(this);
        }

        @Override
        public void clear() {
            this.myId = null;
            this.propID = null;
        }

        public String getMyId() {
            return this.myId;
        }

        public prepare_args setMyId(String myId) {
            this.myId = myId;
            return this;
        }

        public void unsetMyId() {
            this.myId = null;
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return this.myId != null;
        }

        public void setMyIdIsSet(boolean value) {
            if (!value) {
                this.myId = null;
            }
        }

        public ThriftProposalID getPropID() {
            return this.propID;
        }

        public prepare_args setPropID(ThriftProposalID propID) {
            this.propID = propID;
            return this;
        }

        public void unsetPropID() {
            this.propID = null;
        }

        /** Returns true if field propID is set (has been assigned a value) and false otherwise */
        public boolean isSetPropID() {
            return this.propID != null;
        }

        public void setPropIDIsSet(boolean value) {
            if (!value) {
                this.propID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((String)value);
                    }
                    break;

                case PROP_ID:
                    if (value == null) {
                        unsetPropID();
                    } else {
                        setPropID((ThriftProposalID)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return getMyId();

                case PROP_ID:
                    return getPropID();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case PROP_ID:
                    return isSetPropID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof prepare_args)
                return this.equals((prepare_args)that);
            return false;
        }

        public boolean equals(prepare_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true && this.isSetMyId();
            boolean that_present_myId = true && that.isSetMyId();
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (!this.myId.equals(that.myId))
                    return false;
            }

            boolean this_present_propID = true && this.isSetPropID();
            boolean that_present_propID = true && that.isSetPropID();
            if (this_present_propID || that_present_propID) {
                if (!(this_present_propID && that_present_propID))
                    return false;
                if (!this.propID.equals(that.propID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_myId = true && (isSetMyId());
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            boolean present_propID = true && (isSetPropID());
            list.add(present_propID);
            if (present_propID)
                list.add(propID);

            return list.hashCode();
        }

        @Override
        public int compareTo(prepare_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPropID()).compareTo(other.isSetPropID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPropID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propID, other.propID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("prepare_args(");
            boolean first = true;

            sb.append("myId:");
            if (this.myId == null) {
                sb.append("null");
            } else {
                sb.append(this.myId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("propID:");
            if (this.propID == null) {
                sb.append("null");
            } else {
                sb.append(this.propID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (propID != null) {
                propID.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class prepare_argsStandardSchemeFactory implements SchemeFactory {
            public prepare_argsStandardScheme getScheme() {
                return new prepare_argsStandardScheme();
            }
        }

        private static class prepare_argsStandardScheme extends StandardScheme<prepare_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, prepare_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.myId = iprot.readString();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.propID = new ThriftProposalID();
                                struct.propID.read(iprot);
                                struct.setPropIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, prepare_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.myId != null) {
                    oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                    oprot.writeString(struct.myId);
                    oprot.writeFieldEnd();
                }
                if (struct.propID != null) {
                    oprot.writeFieldBegin(PROP_ID_FIELD_DESC);
                    struct.propID.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class prepare_argsTupleSchemeFactory implements SchemeFactory {
            public prepare_argsTupleScheme getScheme() {
                return new prepare_argsTupleScheme();
            }
        }

        private static class prepare_argsTupleScheme extends TupleScheme<prepare_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, prepare_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPropID()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMyId()) {
                    oprot.writeString(struct.myId);
                }
                if (struct.isSetPropID()) {
                    struct.propID.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, prepare_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.myId = iprot.readString();
                    struct.setMyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.propID = new ThriftProposalID();
                    struct.propID.read(iprot);
                    struct.setPropIDIsSet(true);
                }
            }
        }

    }

    public static class promise_args implements org.apache.thrift.TBase<promise_args, promise_args._Fields>, java.io.Serializable, Cloneable, Comparable<promise_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("promise_args");

        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("propID", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        private static final org.apache.thrift.protocol.TField PREV_PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("prevPropId", org.apache.thrift.protocol.TType.STRUCT, (short)3);
        private static final org.apache.thrift.protocol.TField ACCEPTED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedValue", org.apache.thrift.protocol.TType.STRUCT, (short)4);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new promise_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new promise_argsTupleSchemeFactory());
        }

        public String myId; // required
        public ThriftProposalID propID; // required
        public ThriftProposalID prevPropId; // required
        public Transaction acceptedValue; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MY_ID((short)1, "myId"),
            PROP_ID((short)2, "propID"),
            PREV_PROP_ID((short)3, "prevPropId"),
            ACCEPTED_VALUE((short)4, "acceptedValue");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // PROP_ID
                        return PROP_ID;
                    case 3: // PREV_PROP_ID
                        return PREV_PROP_ID;
                    case 4: // ACCEPTED_VALUE
                        return ACCEPTED_VALUE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("propID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            tmpMap.put(_Fields.PREV_PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("prevPropId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            tmpMap.put(_Fields.ACCEPTED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("acceptedValue", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transaction.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(promise_args.class, metaDataMap);
        }

        public promise_args() {
        }

        public promise_args(
                String myId,
                ThriftProposalID propID,
                ThriftProposalID prevPropId,
                Transaction acceptedValue)
        {
            this();
            this.myId = myId;
            this.propID = propID;
            this.prevPropId = prevPropId;
            this.acceptedValue = acceptedValue;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public promise_args(promise_args other) {
            if (other.isSetMyId()) {
                this.myId = other.myId;
            }
            if (other.isSetPropID()) {
                this.propID = new ThriftProposalID(other.propID);
            }
            if (other.isSetPrevPropId()) {
                this.prevPropId = new ThriftProposalID(other.prevPropId);
            }
            if (other.isSetAcceptedValue()) {
                this.acceptedValue = new Transaction(other.acceptedValue);
            }
        }

        public promise_args deepCopy() {
            return new promise_args(this);
        }

        @Override
        public void clear() {
            this.myId = null;
            this.propID = null;
            this.prevPropId = null;
            this.acceptedValue = null;
        }

        public String getMyId() {
            return this.myId;
        }

        public promise_args setMyId(String myId) {
            this.myId = myId;
            return this;
        }

        public void unsetMyId() {
            this.myId = null;
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return this.myId != null;
        }

        public void setMyIdIsSet(boolean value) {
            if (!value) {
                this.myId = null;
            }
        }

        public ThriftProposalID getPropID() {
            return this.propID;
        }

        public promise_args setPropID(ThriftProposalID propID) {
            this.propID = propID;
            return this;
        }

        public void unsetPropID() {
            this.propID = null;
        }

        /** Returns true if field propID is set (has been assigned a value) and false otherwise */
        public boolean isSetPropID() {
            return this.propID != null;
        }

        public void setPropIDIsSet(boolean value) {
            if (!value) {
                this.propID = null;
            }
        }

        public ThriftProposalID getPrevPropId() {
            return this.prevPropId;
        }

        public promise_args setPrevPropId(ThriftProposalID prevPropId) {
            this.prevPropId = prevPropId;
            return this;
        }

        public void unsetPrevPropId() {
            this.prevPropId = null;
        }

        /** Returns true if field prevPropId is set (has been assigned a value) and false otherwise */
        public boolean isSetPrevPropId() {
            return this.prevPropId != null;
        }

        public void setPrevPropIdIsSet(boolean value) {
            if (!value) {
                this.prevPropId = null;
            }
        }

        public Transaction getAcceptedValue() {
            return this.acceptedValue;
        }

        public promise_args setAcceptedValue(Transaction acceptedValue) {
            this.acceptedValue = acceptedValue;
            return this;
        }

        public void unsetAcceptedValue() {
            this.acceptedValue = null;
        }

        /** Returns true if field acceptedValue is set (has been assigned a value) and false otherwise */
        public boolean isSetAcceptedValue() {
            return this.acceptedValue != null;
        }

        public void setAcceptedValueIsSet(boolean value) {
            if (!value) {
                this.acceptedValue = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((String)value);
                    }
                    break;

                case PROP_ID:
                    if (value == null) {
                        unsetPropID();
                    } else {
                        setPropID((ThriftProposalID)value);
                    }
                    break;

                case PREV_PROP_ID:
                    if (value == null) {
                        unsetPrevPropId();
                    } else {
                        setPrevPropId((ThriftProposalID)value);
                    }
                    break;

                case ACCEPTED_VALUE:
                    if (value == null) {
                        unsetAcceptedValue();
                    } else {
                        setAcceptedValue((Transaction)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return getMyId();

                case PROP_ID:
                    return getPropID();

                case PREV_PROP_ID:
                    return getPrevPropId();

                case ACCEPTED_VALUE:
                    return getAcceptedValue();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case PROP_ID:
                    return isSetPropID();
                case PREV_PROP_ID:
                    return isSetPrevPropId();
                case ACCEPTED_VALUE:
                    return isSetAcceptedValue();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof promise_args)
                return this.equals((promise_args)that);
            return false;
        }

        public boolean equals(promise_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true && this.isSetMyId();
            boolean that_present_myId = true && that.isSetMyId();
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (!this.myId.equals(that.myId))
                    return false;
            }

            boolean this_present_propID = true && this.isSetPropID();
            boolean that_present_propID = true && that.isSetPropID();
            if (this_present_propID || that_present_propID) {
                if (!(this_present_propID && that_present_propID))
                    return false;
                if (!this.propID.equals(that.propID))
                    return false;
            }

            boolean this_present_prevPropId = true && this.isSetPrevPropId();
            boolean that_present_prevPropId = true && that.isSetPrevPropId();
            if (this_present_prevPropId || that_present_prevPropId) {
                if (!(this_present_prevPropId && that_present_prevPropId))
                    return false;
                if (!this.prevPropId.equals(that.prevPropId))
                    return false;
            }

            boolean this_present_acceptedValue = true && this.isSetAcceptedValue();
            boolean that_present_acceptedValue = true && that.isSetAcceptedValue();
            if (this_present_acceptedValue || that_present_acceptedValue) {
                if (!(this_present_acceptedValue && that_present_acceptedValue))
                    return false;
                if (!this.acceptedValue.equals(that.acceptedValue))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_myId = true && (isSetMyId());
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            boolean present_propID = true && (isSetPropID());
            list.add(present_propID);
            if (present_propID)
                list.add(propID);

            boolean present_prevPropId = true && (isSetPrevPropId());
            list.add(present_prevPropId);
            if (present_prevPropId)
                list.add(prevPropId);

            boolean present_acceptedValue = true && (isSetAcceptedValue());
            list.add(present_acceptedValue);
            if (present_acceptedValue)
                list.add(acceptedValue);

            return list.hashCode();
        }

        @Override
        public int compareTo(promise_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPropID()).compareTo(other.isSetPropID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPropID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propID, other.propID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPrevPropId()).compareTo(other.isSetPrevPropId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPrevPropId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevPropId, other.prevPropId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAcceptedValue()).compareTo(other.isSetAcceptedValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAcceptedValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedValue, other.acceptedValue);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("promise_args(");
            boolean first = true;

            sb.append("myId:");
            if (this.myId == null) {
                sb.append("null");
            } else {
                sb.append(this.myId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("propID:");
            if (this.propID == null) {
                sb.append("null");
            } else {
                sb.append(this.propID);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("prevPropId:");
            if (this.prevPropId == null) {
                sb.append("null");
            } else {
                sb.append(this.prevPropId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("acceptedValue:");
            if (this.acceptedValue == null) {
                sb.append("null");
            } else {
                sb.append(this.acceptedValue);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (propID != null) {
                propID.validate();
            }
            if (prevPropId != null) {
                prevPropId.validate();
            }
            if (acceptedValue != null) {
                acceptedValue.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class promise_argsStandardSchemeFactory implements SchemeFactory {
            public promise_argsStandardScheme getScheme() {
                return new promise_argsStandardScheme();
            }
        }

        private static class promise_argsStandardScheme extends StandardScheme<promise_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, promise_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.myId = iprot.readString();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.propID = new ThriftProposalID();
                                struct.propID.read(iprot);
                                struct.setPropIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PREV_PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.prevPropId = new ThriftProposalID();
                                struct.prevPropId.read(iprot);
                                struct.setPrevPropIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 4: // ACCEPTED_VALUE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.acceptedValue = new Transaction();
                                struct.acceptedValue.read(iprot);
                                struct.setAcceptedValueIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, promise_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.myId != null) {
                    oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                    oprot.writeString(struct.myId);
                    oprot.writeFieldEnd();
                }
                if (struct.propID != null) {
                    oprot.writeFieldBegin(PROP_ID_FIELD_DESC);
                    struct.propID.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.prevPropId != null) {
                    oprot.writeFieldBegin(PREV_PROP_ID_FIELD_DESC);
                    struct.prevPropId.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.acceptedValue != null) {
                    oprot.writeFieldBegin(ACCEPTED_VALUE_FIELD_DESC);
                    struct.acceptedValue.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class promise_argsTupleSchemeFactory implements SchemeFactory {
            public promise_argsTupleScheme getScheme() {
                return new promise_argsTupleScheme();
            }
        }

        private static class promise_argsTupleScheme extends TupleScheme<promise_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, promise_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPropID()) {
                    optionals.set(1);
                }
                if (struct.isSetPrevPropId()) {
                    optionals.set(2);
                }
                if (struct.isSetAcceptedValue()) {
                    optionals.set(3);
                }
                oprot.writeBitSet(optionals, 4);
                if (struct.isSetMyId()) {
                    oprot.writeString(struct.myId);
                }
                if (struct.isSetPropID()) {
                    struct.propID.write(oprot);
                }
                if (struct.isSetPrevPropId()) {
                    struct.prevPropId.write(oprot);
                }
                if (struct.isSetAcceptedValue()) {
                    struct.acceptedValue.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, promise_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(4);
                if (incoming.get(0)) {
                    struct.myId = iprot.readString();
                    struct.setMyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.propID = new ThriftProposalID();
                    struct.propID.read(iprot);
                    struct.setPropIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.prevPropId = new ThriftProposalID();
                    struct.prevPropId.read(iprot);
                    struct.setPrevPropIdIsSet(true);
                }
                if (incoming.get(3)) {
                    struct.acceptedValue = new Transaction();
                    struct.acceptedValue.read(iprot);
                    struct.setAcceptedValueIsSet(true);
                }
            }
        }

    }

    public static class accept_args implements org.apache.thrift.TBase<accept_args, accept_args._Fields>, java.io.Serializable, Cloneable, Comparable<accept_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accept_args");

        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("propID", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        private static final org.apache.thrift.protocol.TField ACCEPTED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedValue", org.apache.thrift.protocol.TType.STRUCT, (short)3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new accept_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new accept_argsTupleSchemeFactory());
        }

        public String myId; // required
        public ThriftProposalID propID; // required
        public Transaction acceptedValue; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MY_ID((short)1, "myId"),
            PROP_ID((short)2, "propID"),
            ACCEPTED_VALUE((short)3, "acceptedValue");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // PROP_ID
                        return PROP_ID;
                    case 3: // ACCEPTED_VALUE
                        return ACCEPTED_VALUE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("propID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            tmpMap.put(_Fields.ACCEPTED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("acceptedValue", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transaction.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accept_args.class, metaDataMap);
        }

        public accept_args() {
        }

        public accept_args(
                String myId,
                ThriftProposalID propID,
                Transaction acceptedValue)
        {
            this();
            this.myId = myId;
            this.propID = propID;
            this.acceptedValue = acceptedValue;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public accept_args(accept_args other) {
            if (other.isSetMyId()) {
                this.myId = other.myId;
            }
            if (other.isSetPropID()) {
                this.propID = new ThriftProposalID(other.propID);
            }
            if (other.isSetAcceptedValue()) {
                this.acceptedValue = new Transaction(other.acceptedValue);
            }
        }

        public accept_args deepCopy() {
            return new accept_args(this);
        }

        @Override
        public void clear() {
            this.myId = null;
            this.propID = null;
            this.acceptedValue = null;
        }

        public String getMyId() {
            return this.myId;
        }

        public accept_args setMyId(String myId) {
            this.myId = myId;
            return this;
        }

        public void unsetMyId() {
            this.myId = null;
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return this.myId != null;
        }

        public void setMyIdIsSet(boolean value) {
            if (!value) {
                this.myId = null;
            }
        }

        public ThriftProposalID getPropID() {
            return this.propID;
        }

        public accept_args setPropID(ThriftProposalID propID) {
            this.propID = propID;
            return this;
        }

        public void unsetPropID() {
            this.propID = null;
        }

        /** Returns true if field propID is set (has been assigned a value) and false otherwise */
        public boolean isSetPropID() {
            return this.propID != null;
        }

        public void setPropIDIsSet(boolean value) {
            if (!value) {
                this.propID = null;
            }
        }

        public Transaction getAcceptedValue() {
            return this.acceptedValue;
        }

        public accept_args setAcceptedValue(Transaction acceptedValue) {
            this.acceptedValue = acceptedValue;
            return this;
        }

        public void unsetAcceptedValue() {
            this.acceptedValue = null;
        }

        /** Returns true if field acceptedValue is set (has been assigned a value) and false otherwise */
        public boolean isSetAcceptedValue() {
            return this.acceptedValue != null;
        }

        public void setAcceptedValueIsSet(boolean value) {
            if (!value) {
                this.acceptedValue = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((String)value);
                    }
                    break;

                case PROP_ID:
                    if (value == null) {
                        unsetPropID();
                    } else {
                        setPropID((ThriftProposalID)value);
                    }
                    break;

                case ACCEPTED_VALUE:
                    if (value == null) {
                        unsetAcceptedValue();
                    } else {
                        setAcceptedValue((Transaction)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return getMyId();

                case PROP_ID:
                    return getPropID();

                case ACCEPTED_VALUE:
                    return getAcceptedValue();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case PROP_ID:
                    return isSetPropID();
                case ACCEPTED_VALUE:
                    return isSetAcceptedValue();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof accept_args)
                return this.equals((accept_args)that);
            return false;
        }

        public boolean equals(accept_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true && this.isSetMyId();
            boolean that_present_myId = true && that.isSetMyId();
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (!this.myId.equals(that.myId))
                    return false;
            }

            boolean this_present_propID = true && this.isSetPropID();
            boolean that_present_propID = true && that.isSetPropID();
            if (this_present_propID || that_present_propID) {
                if (!(this_present_propID && that_present_propID))
                    return false;
                if (!this.propID.equals(that.propID))
                    return false;
            }

            boolean this_present_acceptedValue = true && this.isSetAcceptedValue();
            boolean that_present_acceptedValue = true && that.isSetAcceptedValue();
            if (this_present_acceptedValue || that_present_acceptedValue) {
                if (!(this_present_acceptedValue && that_present_acceptedValue))
                    return false;
                if (!this.acceptedValue.equals(that.acceptedValue))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_myId = true && (isSetMyId());
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            boolean present_propID = true && (isSetPropID());
            list.add(present_propID);
            if (present_propID)
                list.add(propID);

            boolean present_acceptedValue = true && (isSetAcceptedValue());
            list.add(present_acceptedValue);
            if (present_acceptedValue)
                list.add(acceptedValue);

            return list.hashCode();
        }

        @Override
        public int compareTo(accept_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPropID()).compareTo(other.isSetPropID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPropID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propID, other.propID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAcceptedValue()).compareTo(other.isSetAcceptedValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAcceptedValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedValue, other.acceptedValue);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("accept_args(");
            boolean first = true;

            sb.append("myId:");
            if (this.myId == null) {
                sb.append("null");
            } else {
                sb.append(this.myId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("propID:");
            if (this.propID == null) {
                sb.append("null");
            } else {
                sb.append(this.propID);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("acceptedValue:");
            if (this.acceptedValue == null) {
                sb.append("null");
            } else {
                sb.append(this.acceptedValue);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (propID != null) {
                propID.validate();
            }
            if (acceptedValue != null) {
                acceptedValue.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class accept_argsStandardSchemeFactory implements SchemeFactory {
            public accept_argsStandardScheme getScheme() {
                return new accept_argsStandardScheme();
            }
        }

        private static class accept_argsStandardScheme extends StandardScheme<accept_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, accept_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.myId = iprot.readString();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.propID = new ThriftProposalID();
                                struct.propID.read(iprot);
                                struct.setPropIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // ACCEPTED_VALUE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.acceptedValue = new Transaction();
                                struct.acceptedValue.read(iprot);
                                struct.setAcceptedValueIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, accept_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.myId != null) {
                    oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                    oprot.writeString(struct.myId);
                    oprot.writeFieldEnd();
                }
                if (struct.propID != null) {
                    oprot.writeFieldBegin(PROP_ID_FIELD_DESC);
                    struct.propID.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.acceptedValue != null) {
                    oprot.writeFieldBegin(ACCEPTED_VALUE_FIELD_DESC);
                    struct.acceptedValue.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class accept_argsTupleSchemeFactory implements SchemeFactory {
            public accept_argsTupleScheme getScheme() {
                return new accept_argsTupleScheme();
            }
        }

        private static class accept_argsTupleScheme extends TupleScheme<accept_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, accept_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPropID()) {
                    optionals.set(1);
                }
                if (struct.isSetAcceptedValue()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetMyId()) {
                    oprot.writeString(struct.myId);
                }
                if (struct.isSetPropID()) {
                    struct.propID.write(oprot);
                }
                if (struct.isSetAcceptedValue()) {
                    struct.acceptedValue.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, accept_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.myId = iprot.readString();
                    struct.setMyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.propID = new ThriftProposalID();
                    struct.propID.read(iprot);
                    struct.setPropIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.acceptedValue = new Transaction();
                    struct.acceptedValue.read(iprot);
                    struct.setAcceptedValueIsSet(true);
                }
            }
        }

    }

    public static class accepted_args implements org.apache.thrift.TBase<accepted_args, accepted_args._Fields>, java.io.Serializable, Cloneable, Comparable<accepted_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("accepted_args");

        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("propID", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        private static final org.apache.thrift.protocol.TField ACCEPTED_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("acceptedValue", org.apache.thrift.protocol.TType.STRUCT, (short)3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new accepted_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new accepted_argsTupleSchemeFactory());
        }

        public String myId; // required
        public ThriftProposalID propID; // required
        public Transaction acceptedValue; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MY_ID((short)1, "myId"),
            PROP_ID((short)2, "propID"),
            ACCEPTED_VALUE((short)3, "acceptedValue");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // PROP_ID
                        return PROP_ID;
                    case 3: // ACCEPTED_VALUE
                        return ACCEPTED_VALUE;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("propID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            tmpMap.put(_Fields.ACCEPTED_VALUE, new org.apache.thrift.meta_data.FieldMetaData("acceptedValue", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transaction.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(accepted_args.class, metaDataMap);
        }

        public accepted_args() {
        }

        public accepted_args(
                String myId,
                ThriftProposalID propID,
                Transaction acceptedValue)
        {
            this();
            this.myId = myId;
            this.propID = propID;
            this.acceptedValue = acceptedValue;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public accepted_args(accepted_args other) {
            if (other.isSetMyId()) {
                this.myId = other.myId;
            }
            if (other.isSetPropID()) {
                this.propID = new ThriftProposalID(other.propID);
            }
            if (other.isSetAcceptedValue()) {
                this.acceptedValue = new Transaction(other.acceptedValue);
            }
        }

        public accepted_args deepCopy() {
            return new accepted_args(this);
        }

        @Override
        public void clear() {
            this.myId = null;
            this.propID = null;
            this.acceptedValue = null;
        }

        public String getMyId() {
            return this.myId;
        }

        public accepted_args setMyId(String myId) {
            this.myId = myId;
            return this;
        }

        public void unsetMyId() {
            this.myId = null;
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return this.myId != null;
        }

        public void setMyIdIsSet(boolean value) {
            if (!value) {
                this.myId = null;
            }
        }

        public ThriftProposalID getPropID() {
            return this.propID;
        }

        public accepted_args setPropID(ThriftProposalID propID) {
            this.propID = propID;
            return this;
        }

        public void unsetPropID() {
            this.propID = null;
        }

        /** Returns true if field propID is set (has been assigned a value) and false otherwise */
        public boolean isSetPropID() {
            return this.propID != null;
        }

        public void setPropIDIsSet(boolean value) {
            if (!value) {
                this.propID = null;
            }
        }

        public Transaction getAcceptedValue() {
            return this.acceptedValue;
        }

        public accepted_args setAcceptedValue(Transaction acceptedValue) {
            this.acceptedValue = acceptedValue;
            return this;
        }

        public void unsetAcceptedValue() {
            this.acceptedValue = null;
        }

        /** Returns true if field acceptedValue is set (has been assigned a value) and false otherwise */
        public boolean isSetAcceptedValue() {
            return this.acceptedValue != null;
        }

        public void setAcceptedValueIsSet(boolean value) {
            if (!value) {
                this.acceptedValue = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((String)value);
                    }
                    break;

                case PROP_ID:
                    if (value == null) {
                        unsetPropID();
                    } else {
                        setPropID((ThriftProposalID)value);
                    }
                    break;

                case ACCEPTED_VALUE:
                    if (value == null) {
                        unsetAcceptedValue();
                    } else {
                        setAcceptedValue((Transaction)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return getMyId();

                case PROP_ID:
                    return getPropID();

                case ACCEPTED_VALUE:
                    return getAcceptedValue();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case PROP_ID:
                    return isSetPropID();
                case ACCEPTED_VALUE:
                    return isSetAcceptedValue();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof accepted_args)
                return this.equals((accepted_args)that);
            return false;
        }

        public boolean equals(accepted_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true && this.isSetMyId();
            boolean that_present_myId = true && that.isSetMyId();
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (!this.myId.equals(that.myId))
                    return false;
            }

            boolean this_present_propID = true && this.isSetPropID();
            boolean that_present_propID = true && that.isSetPropID();
            if (this_present_propID || that_present_propID) {
                if (!(this_present_propID && that_present_propID))
                    return false;
                if (!this.propID.equals(that.propID))
                    return false;
            }

            boolean this_present_acceptedValue = true && this.isSetAcceptedValue();
            boolean that_present_acceptedValue = true && that.isSetAcceptedValue();
            if (this_present_acceptedValue || that_present_acceptedValue) {
                if (!(this_present_acceptedValue && that_present_acceptedValue))
                    return false;
                if (!this.acceptedValue.equals(that.acceptedValue))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_myId = true && (isSetMyId());
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            boolean present_propID = true && (isSetPropID());
            list.add(present_propID);
            if (present_propID)
                list.add(propID);

            boolean present_acceptedValue = true && (isSetAcceptedValue());
            list.add(present_acceptedValue);
            if (present_acceptedValue)
                list.add(acceptedValue);

            return list.hashCode();
        }

        @Override
        public int compareTo(accepted_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPropID()).compareTo(other.isSetPropID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPropID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propID, other.propID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetAcceptedValue()).compareTo(other.isSetAcceptedValue());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetAcceptedValue()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.acceptedValue, other.acceptedValue);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("accepted_args(");
            boolean first = true;

            sb.append("myId:");
            if (this.myId == null) {
                sb.append("null");
            } else {
                sb.append(this.myId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("propID:");
            if (this.propID == null) {
                sb.append("null");
            } else {
                sb.append(this.propID);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("acceptedValue:");
            if (this.acceptedValue == null) {
                sb.append("null");
            } else {
                sb.append(this.acceptedValue);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (propID != null) {
                propID.validate();
            }
            if (acceptedValue != null) {
                acceptedValue.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class accepted_argsStandardSchemeFactory implements SchemeFactory {
            public accepted_argsStandardScheme getScheme() {
                return new accepted_argsStandardScheme();
            }
        }

        private static class accepted_argsStandardScheme extends StandardScheme<accepted_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, accepted_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.myId = iprot.readString();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.propID = new ThriftProposalID();
                                struct.propID.read(iprot);
                                struct.setPropIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // ACCEPTED_VALUE
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.acceptedValue = new Transaction();
                                struct.acceptedValue.read(iprot);
                                struct.setAcceptedValueIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, accepted_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.myId != null) {
                    oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                    oprot.writeString(struct.myId);
                    oprot.writeFieldEnd();
                }
                if (struct.propID != null) {
                    oprot.writeFieldBegin(PROP_ID_FIELD_DESC);
                    struct.propID.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.acceptedValue != null) {
                    oprot.writeFieldBegin(ACCEPTED_VALUE_FIELD_DESC);
                    struct.acceptedValue.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class accepted_argsTupleSchemeFactory implements SchemeFactory {
            public accepted_argsTupleScheme getScheme() {
                return new accepted_argsTupleScheme();
            }
        }

        private static class accepted_argsTupleScheme extends TupleScheme<accepted_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, accepted_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPropID()) {
                    optionals.set(1);
                }
                if (struct.isSetAcceptedValue()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetMyId()) {
                    oprot.writeString(struct.myId);
                }
                if (struct.isSetPropID()) {
                    struct.propID.write(oprot);
                }
                if (struct.isSetAcceptedValue()) {
                    struct.acceptedValue.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, accepted_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.myId = iprot.readString();
                    struct.setMyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.propID = new ThriftProposalID();
                    struct.propID.read(iprot);
                    struct.setPropIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.acceptedValue = new Transaction();
                    struct.acceptedValue.read(iprot);
                    struct.setAcceptedValueIsSet(true);
                }
            }
        }

    }

    public static class prepareNACK_args implements org.apache.thrift.TBase<prepareNACK_args, prepareNACK_args._Fields>, java.io.Serializable, Cloneable, Comparable<prepareNACK_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("prepareNACK_args");

        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("propID", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        private static final org.apache.thrift.protocol.TField PROMISED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("promisedID", org.apache.thrift.protocol.TType.STRUCT, (short)3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new prepareNACK_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new prepareNACK_argsTupleSchemeFactory());
        }

        public String myId; // required
        public ThriftProposalID propID; // required
        public ThriftProposalID promisedID; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MY_ID((short)1, "myId"),
            PROP_ID((short)2, "propID"),
            PROMISED_ID((short)3, "promisedID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // PROP_ID
                        return PROP_ID;
                    case 3: // PROMISED_ID
                        return PROMISED_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("propID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            tmpMap.put(_Fields.PROMISED_ID, new org.apache.thrift.meta_data.FieldMetaData("promisedID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(prepareNACK_args.class, metaDataMap);
        }

        public prepareNACK_args() {
        }

        public prepareNACK_args(
                String myId,
                ThriftProposalID propID,
                ThriftProposalID promisedID)
        {
            this();
            this.myId = myId;
            this.propID = propID;
            this.promisedID = promisedID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public prepareNACK_args(prepareNACK_args other) {
            if (other.isSetMyId()) {
                this.myId = other.myId;
            }
            if (other.isSetPropID()) {
                this.propID = new ThriftProposalID(other.propID);
            }
            if (other.isSetPromisedID()) {
                this.promisedID = new ThriftProposalID(other.promisedID);
            }
        }

        public prepareNACK_args deepCopy() {
            return new prepareNACK_args(this);
        }

        @Override
        public void clear() {
            this.myId = null;
            this.propID = null;
            this.promisedID = null;
        }

        public String getMyId() {
            return this.myId;
        }

        public prepareNACK_args setMyId(String myId) {
            this.myId = myId;
            return this;
        }

        public void unsetMyId() {
            this.myId = null;
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return this.myId != null;
        }

        public void setMyIdIsSet(boolean value) {
            if (!value) {
                this.myId = null;
            }
        }

        public ThriftProposalID getPropID() {
            return this.propID;
        }

        public prepareNACK_args setPropID(ThriftProposalID propID) {
            this.propID = propID;
            return this;
        }

        public void unsetPropID() {
            this.propID = null;
        }

        /** Returns true if field propID is set (has been assigned a value) and false otherwise */
        public boolean isSetPropID() {
            return this.propID != null;
        }

        public void setPropIDIsSet(boolean value) {
            if (!value) {
                this.propID = null;
            }
        }

        public ThriftProposalID getPromisedID() {
            return this.promisedID;
        }

        public prepareNACK_args setPromisedID(ThriftProposalID promisedID) {
            this.promisedID = promisedID;
            return this;
        }

        public void unsetPromisedID() {
            this.promisedID = null;
        }

        /** Returns true if field promisedID is set (has been assigned a value) and false otherwise */
        public boolean isSetPromisedID() {
            return this.promisedID != null;
        }

        public void setPromisedIDIsSet(boolean value) {
            if (!value) {
                this.promisedID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((String)value);
                    }
                    break;

                case PROP_ID:
                    if (value == null) {
                        unsetPropID();
                    } else {
                        setPropID((ThriftProposalID)value);
                    }
                    break;

                case PROMISED_ID:
                    if (value == null) {
                        unsetPromisedID();
                    } else {
                        setPromisedID((ThriftProposalID)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return getMyId();

                case PROP_ID:
                    return getPropID();

                case PROMISED_ID:
                    return getPromisedID();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case PROP_ID:
                    return isSetPropID();
                case PROMISED_ID:
                    return isSetPromisedID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof prepareNACK_args)
                return this.equals((prepareNACK_args)that);
            return false;
        }

        public boolean equals(prepareNACK_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true && this.isSetMyId();
            boolean that_present_myId = true && that.isSetMyId();
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (!this.myId.equals(that.myId))
                    return false;
            }

            boolean this_present_propID = true && this.isSetPropID();
            boolean that_present_propID = true && that.isSetPropID();
            if (this_present_propID || that_present_propID) {
                if (!(this_present_propID && that_present_propID))
                    return false;
                if (!this.propID.equals(that.propID))
                    return false;
            }

            boolean this_present_promisedID = true && this.isSetPromisedID();
            boolean that_present_promisedID = true && that.isSetPromisedID();
            if (this_present_promisedID || that_present_promisedID) {
                if (!(this_present_promisedID && that_present_promisedID))
                    return false;
                if (!this.promisedID.equals(that.promisedID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_myId = true && (isSetMyId());
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            boolean present_propID = true && (isSetPropID());
            list.add(present_propID);
            if (present_propID)
                list.add(propID);

            boolean present_promisedID = true && (isSetPromisedID());
            list.add(present_promisedID);
            if (present_promisedID)
                list.add(promisedID);

            return list.hashCode();
        }

        @Override
        public int compareTo(prepareNACK_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPropID()).compareTo(other.isSetPropID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPropID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propID, other.propID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPromisedID()).compareTo(other.isSetPromisedID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPromisedID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promisedID, other.promisedID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("prepareNACK_args(");
            boolean first = true;

            sb.append("myId:");
            if (this.myId == null) {
                sb.append("null");
            } else {
                sb.append(this.myId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("propID:");
            if (this.propID == null) {
                sb.append("null");
            } else {
                sb.append(this.propID);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("promisedID:");
            if (this.promisedID == null) {
                sb.append("null");
            } else {
                sb.append(this.promisedID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (propID != null) {
                propID.validate();
            }
            if (promisedID != null) {
                promisedID.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class prepareNACK_argsStandardSchemeFactory implements SchemeFactory {
            public prepareNACK_argsStandardScheme getScheme() {
                return new prepareNACK_argsStandardScheme();
            }
        }

        private static class prepareNACK_argsStandardScheme extends StandardScheme<prepareNACK_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, prepareNACK_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.myId = iprot.readString();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.propID = new ThriftProposalID();
                                struct.propID.read(iprot);
                                struct.setPropIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PROMISED_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.promisedID = new ThriftProposalID();
                                struct.promisedID.read(iprot);
                                struct.setPromisedIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, prepareNACK_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.myId != null) {
                    oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                    oprot.writeString(struct.myId);
                    oprot.writeFieldEnd();
                }
                if (struct.propID != null) {
                    oprot.writeFieldBegin(PROP_ID_FIELD_DESC);
                    struct.propID.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.promisedID != null) {
                    oprot.writeFieldBegin(PROMISED_ID_FIELD_DESC);
                    struct.promisedID.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class prepareNACK_argsTupleSchemeFactory implements SchemeFactory {
            public prepareNACK_argsTupleScheme getScheme() {
                return new prepareNACK_argsTupleScheme();
            }
        }

        private static class prepareNACK_argsTupleScheme extends TupleScheme<prepareNACK_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, prepareNACK_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPropID()) {
                    optionals.set(1);
                }
                if (struct.isSetPromisedID()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetMyId()) {
                    oprot.writeString(struct.myId);
                }
                if (struct.isSetPropID()) {
                    struct.propID.write(oprot);
                }
                if (struct.isSetPromisedID()) {
                    struct.promisedID.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, prepareNACK_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.myId = iprot.readString();
                    struct.setMyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.propID = new ThriftProposalID();
                    struct.propID.read(iprot);
                    struct.setPropIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.promisedID = new ThriftProposalID();
                    struct.promisedID.read(iprot);
                    struct.setPromisedIDIsSet(true);
                }
            }
        }

    }

    public static class acceptNACK_args implements org.apache.thrift.TBase<acceptNACK_args, acceptNACK_args._Fields>, java.io.Serializable, Cloneable, Comparable<acceptNACK_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("acceptNACK_args");

        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("propID", org.apache.thrift.protocol.TType.STRUCT, (short)2);
        private static final org.apache.thrift.protocol.TField PROMISED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("promisedID", org.apache.thrift.protocol.TType.STRUCT, (short)3);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new acceptNACK_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new acceptNACK_argsTupleSchemeFactory());
        }

        public String myId; // required
        public ThriftProposalID propID; // required
        public ThriftProposalID promisedID; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MY_ID((short)1, "myId"),
            PROP_ID((short)2, "propID"),
            PROMISED_ID((short)3, "promisedID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // PROP_ID
                        return PROP_ID;
                    case 3: // PROMISED_ID
                        return PROMISED_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("propID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            tmpMap.put(_Fields.PROMISED_ID, new org.apache.thrift.meta_data.FieldMetaData("promisedID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(acceptNACK_args.class, metaDataMap);
        }

        public acceptNACK_args() {
        }

        public acceptNACK_args(
                String myId,
                ThriftProposalID propID,
                ThriftProposalID promisedID)
        {
            this();
            this.myId = myId;
            this.propID = propID;
            this.promisedID = promisedID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public acceptNACK_args(acceptNACK_args other) {
            if (other.isSetMyId()) {
                this.myId = other.myId;
            }
            if (other.isSetPropID()) {
                this.propID = new ThriftProposalID(other.propID);
            }
            if (other.isSetPromisedID()) {
                this.promisedID = new ThriftProposalID(other.promisedID);
            }
        }

        public acceptNACK_args deepCopy() {
            return new acceptNACK_args(this);
        }

        @Override
        public void clear() {
            this.myId = null;
            this.propID = null;
            this.promisedID = null;
        }

        public String getMyId() {
            return this.myId;
        }

        public acceptNACK_args setMyId(String myId) {
            this.myId = myId;
            return this;
        }

        public void unsetMyId() {
            this.myId = null;
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return this.myId != null;
        }

        public void setMyIdIsSet(boolean value) {
            if (!value) {
                this.myId = null;
            }
        }

        public ThriftProposalID getPropID() {
            return this.propID;
        }

        public acceptNACK_args setPropID(ThriftProposalID propID) {
            this.propID = propID;
            return this;
        }

        public void unsetPropID() {
            this.propID = null;
        }

        /** Returns true if field propID is set (has been assigned a value) and false otherwise */
        public boolean isSetPropID() {
            return this.propID != null;
        }

        public void setPropIDIsSet(boolean value) {
            if (!value) {
                this.propID = null;
            }
        }

        public ThriftProposalID getPromisedID() {
            return this.promisedID;
        }

        public acceptNACK_args setPromisedID(ThriftProposalID promisedID) {
            this.promisedID = promisedID;
            return this;
        }

        public void unsetPromisedID() {
            this.promisedID = null;
        }

        /** Returns true if field promisedID is set (has been assigned a value) and false otherwise */
        public boolean isSetPromisedID() {
            return this.promisedID != null;
        }

        public void setPromisedIDIsSet(boolean value) {
            if (!value) {
                this.promisedID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((String)value);
                    }
                    break;

                case PROP_ID:
                    if (value == null) {
                        unsetPropID();
                    } else {
                        setPropID((ThriftProposalID)value);
                    }
                    break;

                case PROMISED_ID:
                    if (value == null) {
                        unsetPromisedID();
                    } else {
                        setPromisedID((ThriftProposalID)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return getMyId();

                case PROP_ID:
                    return getPropID();

                case PROMISED_ID:
                    return getPromisedID();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case PROP_ID:
                    return isSetPropID();
                case PROMISED_ID:
                    return isSetPromisedID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof acceptNACK_args)
                return this.equals((acceptNACK_args)that);
            return false;
        }

        public boolean equals(acceptNACK_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true && this.isSetMyId();
            boolean that_present_myId = true && that.isSetMyId();
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (!this.myId.equals(that.myId))
                    return false;
            }

            boolean this_present_propID = true && this.isSetPropID();
            boolean that_present_propID = true && that.isSetPropID();
            if (this_present_propID || that_present_propID) {
                if (!(this_present_propID && that_present_propID))
                    return false;
                if (!this.propID.equals(that.propID))
                    return false;
            }

            boolean this_present_promisedID = true && this.isSetPromisedID();
            boolean that_present_promisedID = true && that.isSetPromisedID();
            if (this_present_promisedID || that_present_promisedID) {
                if (!(this_present_promisedID && that_present_promisedID))
                    return false;
                if (!this.promisedID.equals(that.promisedID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_myId = true && (isSetMyId());
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            boolean present_propID = true && (isSetPropID());
            list.add(present_propID);
            if (present_propID)
                list.add(propID);

            boolean present_promisedID = true && (isSetPromisedID());
            list.add(present_promisedID);
            if (present_promisedID)
                list.add(promisedID);

            return list.hashCode();
        }

        @Override
        public int compareTo(acceptNACK_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPropID()).compareTo(other.isSetPropID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPropID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.propID, other.propID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetPromisedID()).compareTo(other.isSetPromisedID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetPromisedID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.promisedID, other.promisedID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("acceptNACK_args(");
            boolean first = true;

            sb.append("myId:");
            if (this.myId == null) {
                sb.append("null");
            } else {
                sb.append(this.myId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("propID:");
            if (this.propID == null) {
                sb.append("null");
            } else {
                sb.append(this.propID);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("promisedID:");
            if (this.promisedID == null) {
                sb.append("null");
            } else {
                sb.append(this.promisedID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (propID != null) {
                propID.validate();
            }
            if (promisedID != null) {
                promisedID.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class acceptNACK_argsStandardSchemeFactory implements SchemeFactory {
            public acceptNACK_argsStandardScheme getScheme() {
                return new acceptNACK_argsStandardScheme();
            }
        }

        private static class acceptNACK_argsStandardScheme extends StandardScheme<acceptNACK_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, acceptNACK_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.myId = iprot.readString();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.propID = new ThriftProposalID();
                                struct.propID.read(iprot);
                                struct.setPropIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 3: // PROMISED_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.promisedID = new ThriftProposalID();
                                struct.promisedID.read(iprot);
                                struct.setPromisedIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, acceptNACK_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.myId != null) {
                    oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                    oprot.writeString(struct.myId);
                    oprot.writeFieldEnd();
                }
                if (struct.propID != null) {
                    oprot.writeFieldBegin(PROP_ID_FIELD_DESC);
                    struct.propID.write(oprot);
                    oprot.writeFieldEnd();
                }
                if (struct.promisedID != null) {
                    oprot.writeFieldBegin(PROMISED_ID_FIELD_DESC);
                    struct.promisedID.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class acceptNACK_argsTupleSchemeFactory implements SchemeFactory {
            public acceptNACK_argsTupleScheme getScheme() {
                return new acceptNACK_argsTupleScheme();
            }
        }

        private static class acceptNACK_argsTupleScheme extends TupleScheme<acceptNACK_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, acceptNACK_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMyId()) {
                    optionals.set(0);
                }
                if (struct.isSetPropID()) {
                    optionals.set(1);
                }
                if (struct.isSetPromisedID()) {
                    optionals.set(2);
                }
                oprot.writeBitSet(optionals, 3);
                if (struct.isSetMyId()) {
                    oprot.writeString(struct.myId);
                }
                if (struct.isSetPropID()) {
                    struct.propID.write(oprot);
                }
                if (struct.isSetPromisedID()) {
                    struct.promisedID.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, acceptNACK_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(3);
                if (incoming.get(0)) {
                    struct.myId = iprot.readString();
                    struct.setMyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.propID = new ThriftProposalID();
                    struct.propID.read(iprot);
                    struct.setPropIDIsSet(true);
                }
                if (incoming.get(2)) {
                    struct.promisedID = new ThriftProposalID();
                    struct.promisedID.read(iprot);
                    struct.setPromisedIDIsSet(true);
                }
            }
        }

    }

    public static class heartbeat_args implements org.apache.thrift.TBase<heartbeat_args, heartbeat_args._Fields>, java.io.Serializable, Cloneable, Comparable<heartbeat_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("heartbeat_args");

        private static final org.apache.thrift.protocol.TField MY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("myId", org.apache.thrift.protocol.TType.STRING, (short)1);
        private static final org.apache.thrift.protocol.TField LEADER_PROP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderPropID", org.apache.thrift.protocol.TType.STRUCT, (short)2);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new heartbeat_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new heartbeat_argsTupleSchemeFactory());
        }

        public String myId; // required
        public ThriftProposalID leaderPropID; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            MY_ID((short)1, "myId"),
            LEADER_PROP_ID((short)2, "leaderPropID");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // MY_ID
                        return MY_ID;
                    case 2: // LEADER_PROP_ID
                        return LEADER_PROP_ID;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.MY_ID, new org.apache.thrift.meta_data.FieldMetaData("myId", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
            tmpMap.put(_Fields.LEADER_PROP_ID, new org.apache.thrift.meta_data.FieldMetaData("leaderPropID", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ThriftProposalID.class)));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(heartbeat_args.class, metaDataMap);
        }

        public heartbeat_args() {
        }

        public heartbeat_args(
                String myId,
                ThriftProposalID leaderPropID)
        {
            this();
            this.myId = myId;
            this.leaderPropID = leaderPropID;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public heartbeat_args(heartbeat_args other) {
            if (other.isSetMyId()) {
                this.myId = other.myId;
            }
            if (other.isSetLeaderPropID()) {
                this.leaderPropID = new ThriftProposalID(other.leaderPropID);
            }
        }

        public heartbeat_args deepCopy() {
            return new heartbeat_args(this);
        }

        @Override
        public void clear() {
            this.myId = null;
            this.leaderPropID = null;
        }

        public String getMyId() {
            return this.myId;
        }

        public heartbeat_args setMyId(String myId) {
            this.myId = myId;
            return this;
        }

        public void unsetMyId() {
            this.myId = null;
        }

        /** Returns true if field myId is set (has been assigned a value) and false otherwise */
        public boolean isSetMyId() {
            return this.myId != null;
        }

        public void setMyIdIsSet(boolean value) {
            if (!value) {
                this.myId = null;
            }
        }

        public ThriftProposalID getLeaderPropID() {
            return this.leaderPropID;
        }

        public heartbeat_args setLeaderPropID(ThriftProposalID leaderPropID) {
            this.leaderPropID = leaderPropID;
            return this;
        }

        public void unsetLeaderPropID() {
            this.leaderPropID = null;
        }

        /** Returns true if field leaderPropID is set (has been assigned a value) and false otherwise */
        public boolean isSetLeaderPropID() {
            return this.leaderPropID != null;
        }

        public void setLeaderPropIDIsSet(boolean value) {
            if (!value) {
                this.leaderPropID = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case MY_ID:
                    if (value == null) {
                        unsetMyId();
                    } else {
                        setMyId((String)value);
                    }
                    break;

                case LEADER_PROP_ID:
                    if (value == null) {
                        unsetLeaderPropID();
                    } else {
                        setLeaderPropID((ThriftProposalID)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case MY_ID:
                    return getMyId();

                case LEADER_PROP_ID:
                    return getLeaderPropID();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case MY_ID:
                    return isSetMyId();
                case LEADER_PROP_ID:
                    return isSetLeaderPropID();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof heartbeat_args)
                return this.equals((heartbeat_args)that);
            return false;
        }

        public boolean equals(heartbeat_args that) {
            if (that == null)
                return false;

            boolean this_present_myId = true && this.isSetMyId();
            boolean that_present_myId = true && that.isSetMyId();
            if (this_present_myId || that_present_myId) {
                if (!(this_present_myId && that_present_myId))
                    return false;
                if (!this.myId.equals(that.myId))
                    return false;
            }

            boolean this_present_leaderPropID = true && this.isSetLeaderPropID();
            boolean that_present_leaderPropID = true && that.isSetLeaderPropID();
            if (this_present_leaderPropID || that_present_leaderPropID) {
                if (!(this_present_leaderPropID && that_present_leaderPropID))
                    return false;
                if (!this.leaderPropID.equals(that.leaderPropID))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_myId = true && (isSetMyId());
            list.add(present_myId);
            if (present_myId)
                list.add(myId);

            boolean present_leaderPropID = true && (isSetLeaderPropID());
            list.add(present_leaderPropID);
            if (present_leaderPropID)
                list.add(leaderPropID);

            return list.hashCode();
        }

        @Override
        public int compareTo(heartbeat_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetMyId()).compareTo(other.isSetMyId());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetMyId()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myId, other.myId);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            lastComparison = Boolean.valueOf(isSetLeaderPropID()).compareTo(other.isSetLeaderPropID());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLeaderPropID()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderPropID, other.leaderPropID);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("heartbeat_args(");
            boolean first = true;

            sb.append("myId:");
            if (this.myId == null) {
                sb.append("null");
            } else {
                sb.append(this.myId);
            }
            first = false;
            if (!first) sb.append(", ");
            sb.append("leaderPropID:");
            if (this.leaderPropID == null) {
                sb.append("null");
            } else {
                sb.append(this.leaderPropID);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
            if (leaderPropID != null) {
                leaderPropID.validate();
            }
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class heartbeat_argsStandardSchemeFactory implements SchemeFactory {
            public heartbeat_argsStandardScheme getScheme() {
                return new heartbeat_argsStandardScheme();
            }
        }

        private static class heartbeat_argsStandardScheme extends StandardScheme<heartbeat_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, heartbeat_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // MY_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                                struct.myId = iprot.readString();
                                struct.setMyIdIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        case 2: // LEADER_PROP_ID
                            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                                struct.leaderPropID = new ThriftProposalID();
                                struct.leaderPropID.read(iprot);
                                struct.setLeaderPropIDIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, heartbeat_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.myId != null) {
                    oprot.writeFieldBegin(MY_ID_FIELD_DESC);
                    oprot.writeString(struct.myId);
                    oprot.writeFieldEnd();
                }
                if (struct.leaderPropID != null) {
                    oprot.writeFieldBegin(LEADER_PROP_ID_FIELD_DESC);
                    struct.leaderPropID.write(oprot);
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class heartbeat_argsTupleSchemeFactory implements SchemeFactory {
            public heartbeat_argsTupleScheme getScheme() {
                return new heartbeat_argsTupleScheme();
            }
        }

        private static class heartbeat_argsTupleScheme extends TupleScheme<heartbeat_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, heartbeat_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetMyId()) {
                    optionals.set(0);
                }
                if (struct.isSetLeaderPropID()) {
                    optionals.set(1);
                }
                oprot.writeBitSet(optionals, 2);
                if (struct.isSetMyId()) {
                    oprot.writeString(struct.myId);
                }
                if (struct.isSetLeaderPropID()) {
                    struct.leaderPropID.write(oprot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, heartbeat_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(2);
                if (incoming.get(0)) {
                    struct.myId = iprot.readString();
                    struct.setMyIdIsSet(true);
                }
                if (incoming.get(1)) {
                    struct.leaderPropID = new ThriftProposalID();
                    struct.leaderPropID.read(iprot);
                    struct.setLeaderPropIDIsSet(true);
                }
            }
        }

    }

    public static class update_args implements org.apache.thrift.TBase<update_args, update_args._Fields>, java.io.Serializable, Cloneable, Comparable<update_args>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_args");

        private static final org.apache.thrift.protocol.TField LAST_ACCEPTED_BALLOT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastAcceptedBallot", org.apache.thrift.protocol.TType.I32, (short)1);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new update_argsStandardSchemeFactory());
            schemes.put(TupleScheme.class, new update_argsTupleSchemeFactory());
        }

        public int lastAcceptedBallot; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            LAST_ACCEPTED_BALLOT((short)1, "lastAcceptedBallot");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 1: // LAST_ACCEPTED_BALLOT
                        return LAST_ACCEPTED_BALLOT;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        private static final int __LASTACCEPTEDBALLOT_ISSET_ID = 0;
        private byte __isset_bitfield = 0;
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.LAST_ACCEPTED_BALLOT, new org.apache.thrift.meta_data.FieldMetaData("lastAcceptedBallot", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_args.class, metaDataMap);
        }

        public update_args() {
        }

        public update_args(
                int lastAcceptedBallot)
        {
            this();
            this.lastAcceptedBallot = lastAcceptedBallot;
            setLastAcceptedBallotIsSet(true);
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public update_args(update_args other) {
            __isset_bitfield = other.__isset_bitfield;
            this.lastAcceptedBallot = other.lastAcceptedBallot;
        }

        public update_args deepCopy() {
            return new update_args(this);
        }

        @Override
        public void clear() {
            setLastAcceptedBallotIsSet(false);
            this.lastAcceptedBallot = 0;
        }

        public int getLastAcceptedBallot() {
            return this.lastAcceptedBallot;
        }

        public update_args setLastAcceptedBallot(int lastAcceptedBallot) {
            this.lastAcceptedBallot = lastAcceptedBallot;
            setLastAcceptedBallotIsSet(true);
            return this;
        }

        public void unsetLastAcceptedBallot() {
            __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LASTACCEPTEDBALLOT_ISSET_ID);
        }

        /** Returns true if field lastAcceptedBallot is set (has been assigned a value) and false otherwise */
        public boolean isSetLastAcceptedBallot() {
            return EncodingUtils.testBit(__isset_bitfield, __LASTACCEPTEDBALLOT_ISSET_ID);
        }

        public void setLastAcceptedBallotIsSet(boolean value) {
            __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LASTACCEPTEDBALLOT_ISSET_ID, value);
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case LAST_ACCEPTED_BALLOT:
                    if (value == null) {
                        unsetLastAcceptedBallot();
                    } else {
                        setLastAcceptedBallot((Integer)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case LAST_ACCEPTED_BALLOT:
                    return Integer.valueOf(getLastAcceptedBallot());

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case LAST_ACCEPTED_BALLOT:
                    return isSetLastAcceptedBallot();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof update_args)
                return this.equals((update_args)that);
            return false;
        }

        public boolean equals(update_args that) {
            if (that == null)
                return false;

            boolean this_present_lastAcceptedBallot = true;
            boolean that_present_lastAcceptedBallot = true;
            if (this_present_lastAcceptedBallot || that_present_lastAcceptedBallot) {
                if (!(this_present_lastAcceptedBallot && that_present_lastAcceptedBallot))
                    return false;
                if (this.lastAcceptedBallot != that.lastAcceptedBallot)
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_lastAcceptedBallot = true;
            list.add(present_lastAcceptedBallot);
            if (present_lastAcceptedBallot)
                list.add(lastAcceptedBallot);

            return list.hashCode();
        }

        @Override
        public int compareTo(update_args other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetLastAcceptedBallot()).compareTo(other.isSetLastAcceptedBallot());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetLastAcceptedBallot()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastAcceptedBallot, other.lastAcceptedBallot);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("update_args(");
            boolean first = true;

            sb.append("lastAcceptedBallot:");
            sb.append(this.lastAcceptedBallot);
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
                __isset_bitfield = 0;
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class update_argsStandardSchemeFactory implements SchemeFactory {
            public update_argsStandardScheme getScheme() {
                return new update_argsStandardScheme();
            }
        }

        private static class update_argsStandardScheme extends StandardScheme<update_args> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, update_args struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 1: // LAST_ACCEPTED_BALLOT
                            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                                struct.lastAcceptedBallot = iprot.readI32();
                                struct.setLastAcceptedBallotIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, update_args struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                oprot.writeFieldBegin(LAST_ACCEPTED_BALLOT_FIELD_DESC);
                oprot.writeI32(struct.lastAcceptedBallot);
                oprot.writeFieldEnd();
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class update_argsTupleSchemeFactory implements SchemeFactory {
            public update_argsTupleScheme getScheme() {
                return new update_argsTupleScheme();
            }
        }

        private static class update_argsTupleScheme extends TupleScheme<update_args> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetLastAcceptedBallot()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetLastAcceptedBallot()) {
                    oprot.writeI32(struct.lastAcceptedBallot);
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, update_args struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    struct.lastAcceptedBallot = iprot.readI32();
                    struct.setLastAcceptedBallotIsSet(true);
                }
            }
        }

    }

    public static class update_result implements org.apache.thrift.TBase<update_result, update_result._Fields>, java.io.Serializable, Cloneable, Comparable<update_result>   {
        private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("update_result");

        private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

        private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
        static {
            schemes.put(StandardScheme.class, new update_resultStandardSchemeFactory());
            schemes.put(TupleScheme.class, new update_resultTupleSchemeFactory());
        }

        public List<Transaction> success; // required

        /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
        public enum _Fields implements org.apache.thrift.TFieldIdEnum {
            SUCCESS((short)0, "success");

            private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

            static {
                for (_Fields field : EnumSet.allOf(_Fields.class)) {
                    byName.put(field.getFieldName(), field);
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, or null if its not found.
             */
            public static _Fields findByThriftId(int fieldId) {
                switch(fieldId) {
                    case 0: // SUCCESS
                        return SUCCESS;
                    default:
                        return null;
                }
            }

            /**
             * Find the _Fields constant that matches fieldId, throwing an exception
             * if it is not found.
             */
            public static _Fields findByThriftIdOrThrow(int fieldId) {
                _Fields fields = findByThriftId(fieldId);
                if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
                return fields;
            }

            /**
             * Find the _Fields constant that matches name, or null if its not found.
             */
            public static _Fields findByName(String name) {
                return byName.get(name);
            }

            private final short _thriftId;
            private final String _fieldName;

            _Fields(short thriftId, String fieldName) {
                _thriftId = thriftId;
                _fieldName = fieldName;
            }

            public short getThriftFieldId() {
                return _thriftId;
            }

            public String getFieldName() {
                return _fieldName;
            }
        }

        // isset id assignments
        public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
        static {
            Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
            tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
                    new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Transaction.class))));
            metaDataMap = Collections.unmodifiableMap(tmpMap);
            org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(update_result.class, metaDataMap);
        }

        public update_result() {
        }

        public update_result(
                List<Transaction> success)
        {
            this();
            this.success = success;
        }

        /**
         * Performs a deep copy on <i>other</i>.
         */
        public update_result(update_result other) {
            if (other.isSetSuccess()) {
                List<Transaction> __this__success = new ArrayList<Transaction>(other.success.size());
                for (Transaction other_element : other.success) {
                    __this__success.add(new Transaction(other_element));
                }
                this.success = __this__success;
            }
        }

        public update_result deepCopy() {
            return new update_result(this);
        }

        @Override
        public void clear() {
            this.success = null;
        }

        public int getSuccessSize() {
            return (this.success == null) ? 0 : this.success.size();
        }

        public java.util.Iterator<Transaction> getSuccessIterator() {
            return (this.success == null) ? null : this.success.iterator();
        }

        public void addToSuccess(Transaction elem) {
            if (this.success == null) {
                this.success = new ArrayList<Transaction>();
            }
            this.success.add(elem);
        }

        public List<Transaction> getSuccess() {
            return this.success;
        }

        public update_result setSuccess(List<Transaction> success) {
            this.success = success;
            return this;
        }

        public void unsetSuccess() {
            this.success = null;
        }

        /** Returns true if field success is set (has been assigned a value) and false otherwise */
        public boolean isSetSuccess() {
            return this.success != null;
        }

        public void setSuccessIsSet(boolean value) {
            if (!value) {
                this.success = null;
            }
        }

        public void setFieldValue(_Fields field, Object value) {
            switch (field) {
                case SUCCESS:
                    if (value == null) {
                        unsetSuccess();
                    } else {
                        setSuccess((List<Transaction>)value);
                    }
                    break;

            }
        }

        public Object getFieldValue(_Fields field) {
            switch (field) {
                case SUCCESS:
                    return getSuccess();

            }
            throw new IllegalStateException();
        }

        /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
        public boolean isSet(_Fields field) {
            if (field == null) {
                throw new IllegalArgumentException();
            }

            switch (field) {
                case SUCCESS:
                    return isSetSuccess();
            }
            throw new IllegalStateException();
        }

        @Override
        public boolean equals(Object that) {
            if (that == null)
                return false;
            if (that instanceof update_result)
                return this.equals((update_result)that);
            return false;
        }

        public boolean equals(update_result that) {
            if (that == null)
                return false;

            boolean this_present_success = true && this.isSetSuccess();
            boolean that_present_success = true && that.isSetSuccess();
            if (this_present_success || that_present_success) {
                if (!(this_present_success && that_present_success))
                    return false;
                if (!this.success.equals(that.success))
                    return false;
            }

            return true;
        }

        @Override
        public int hashCode() {
            List<Object> list = new ArrayList<Object>();

            boolean present_success = true && (isSetSuccess());
            list.add(present_success);
            if (present_success)
                list.add(success);

            return list.hashCode();
        }

        @Override
        public int compareTo(update_result other) {
            if (!getClass().equals(other.getClass())) {
                return getClass().getName().compareTo(other.getClass().getName());
            }

            int lastComparison = 0;

            lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
            if (lastComparison != 0) {
                return lastComparison;
            }
            if (isSetSuccess()) {
                lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
                if (lastComparison != 0) {
                    return lastComparison;
                }
            }
            return 0;
        }

        public _Fields fieldForId(int fieldId) {
            return _Fields.findByThriftId(fieldId);
        }

        public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
            schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
            schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder("update_result(");
            boolean first = true;

            sb.append("success:");
            if (this.success == null) {
                sb.append("null");
            } else {
                sb.append(this.success);
            }
            first = false;
            sb.append(")");
            return sb.toString();
        }

        public void validate() throws org.apache.thrift.TException {
            // check for required fields
            // check for sub-struct validity
        }

        private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
            try {
                write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
            try {
                read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
            } catch (org.apache.thrift.TException te) {
                throw new java.io.IOException(te);
            }
        }

        private static class update_resultStandardSchemeFactory implements SchemeFactory {
            public update_resultStandardScheme getScheme() {
                return new update_resultStandardScheme();
            }
        }

        private static class update_resultStandardScheme extends StandardScheme<update_result> {

            public void read(org.apache.thrift.protocol.TProtocol iprot, update_result struct) throws org.apache.thrift.TException {
                org.apache.thrift.protocol.TField schemeField;
                iprot.readStructBegin();
                while (true)
                {
                    schemeField = iprot.readFieldBegin();
                    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                        break;
                    }
                    switch (schemeField.id) {
                        case 0: // SUCCESS
                            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                                {
                                    org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                                    struct.success = new ArrayList<Transaction>(_list0.size);
                                    Transaction _elem1;
                                    for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                                    {
                                        _elem1 = new Transaction();
                                        _elem1.read(iprot);
                                        struct.success.add(_elem1);
                                    }
                                    iprot.readListEnd();
                                }
                                struct.setSuccessIsSet(true);
                            } else {
                                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                            }
                            break;
                        default:
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                    }
                    iprot.readFieldEnd();
                }
                iprot.readStructEnd();

                // check for required fields of primitive type, which can't be checked in the validate method
                struct.validate();
            }

            public void write(org.apache.thrift.protocol.TProtocol oprot, update_result struct) throws org.apache.thrift.TException {
                struct.validate();

                oprot.writeStructBegin(STRUCT_DESC);
                if (struct.success != null) {
                    oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
                    {
                        oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
                        for (Transaction _iter3 : struct.success)
                        {
                            _iter3.write(oprot);
                        }
                        oprot.writeListEnd();
                    }
                    oprot.writeFieldEnd();
                }
                oprot.writeFieldStop();
                oprot.writeStructEnd();
            }

        }

        private static class update_resultTupleSchemeFactory implements SchemeFactory {
            public update_resultTupleScheme getScheme() {
                return new update_resultTupleScheme();
            }
        }

        private static class update_resultTupleScheme extends TupleScheme<update_result> {

            @Override
            public void write(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
                TTupleProtocol oprot = (TTupleProtocol) prot;
                BitSet optionals = new BitSet();
                if (struct.isSetSuccess()) {
                    optionals.set(0);
                }
                oprot.writeBitSet(optionals, 1);
                if (struct.isSetSuccess()) {
                    {
                        oprot.writeI32(struct.success.size());
                        for (Transaction _iter4 : struct.success)
                        {
                            _iter4.write(oprot);
                        }
                    }
                }
            }

            @Override
            public void read(org.apache.thrift.protocol.TProtocol prot, update_result struct) throws org.apache.thrift.TException {
                TTupleProtocol iprot = (TTupleProtocol) prot;
                BitSet incoming = iprot.readBitSet(1);
                if (incoming.get(0)) {
                    {
                        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
                        struct.success = new ArrayList<Transaction>(_list5.size);
                        Transaction _elem6;
                        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
                        {
                            _elem6 = new Transaction();
                            _elem6.read(iprot);
                            struct.success.add(_elem6);
                        }
                    }
                    struct.setSuccessIsSet(true);
                }
            }
        }

    }

}
