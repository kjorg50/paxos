/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsb.cs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-10")
public class ThriftProposalID implements org.apache.thrift.TBase<ThriftProposalID, ThriftProposalID._Fields>, java.io.Serializable, Cloneable, Comparable<ThriftProposalID> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ThriftProposalID");

    private static final org.apache.thrift.protocol.TField BALLOT_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ballotNumber", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new ThriftProposalIDStandardSchemeFactory());
        schemes.put(TupleScheme.class, new ThriftProposalIDTupleSchemeFactory());
    }

    public long ballotNumber; // required
    public String uid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        BALLOT_NUMBER((short)1, "ballotNumber"),
        UID((short)2, "uid");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // BALLOT_NUMBER
                    return BALLOT_NUMBER;
                case 2: // UID
                    return UID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __BALLOTNUMBER_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.BALLOT_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ballotNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "int")));
        tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ThriftProposalID.class, metaDataMap);
    }

    public ThriftProposalID() {
    }

    public ThriftProposalID(
            long ballotNumber,
            String uid)
    {
        this();
        this.ballotNumber = ballotNumber;
        setBallotNumberIsSet(true);
        this.uid = uid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ThriftProposalID(ThriftProposalID other) {
        __isset_bitfield = other.__isset_bitfield;
        this.ballotNumber = other.ballotNumber;
        if (other.isSetUid()) {
            this.uid = other.uid;
        }
    }

    public ThriftProposalID deepCopy() {
        return new ThriftProposalID(this);
    }

    @Override
    public void clear() {
        setBallotNumberIsSet(false);
        this.ballotNumber = 0;
        this.uid = null;
    }

    public long getBallotNumber() {
        return this.ballotNumber;
    }

    public ThriftProposalID setBallotNumber(long ballotNumber) {
        this.ballotNumber = ballotNumber;
        setBallotNumberIsSet(true);
        return this;
    }

    public void unsetBallotNumber() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
    }

    /** Returns true if field ballotNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetBallotNumber() {
        return EncodingUtils.testBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID);
    }

    public void setBallotNumberIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BALLOTNUMBER_ISSET_ID, value);
    }

    public String getUid() {
        return this.uid;
    }

    public ThriftProposalID setUid(String uid) {
        this.uid = uid;
        return this;
    }

    public void unsetUid() {
        this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
        return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
        if (!value) {
            this.uid = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case BALLOT_NUMBER:
                if (value == null) {
                    unsetBallotNumber();
                } else {
                    setBallotNumber((Long)value);
                }
                break;

            case UID:
                if (value == null) {
                    unsetUid();
                } else {
                    setUid((String)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case BALLOT_NUMBER:
                return Long.valueOf(getBallotNumber());

            case UID:
                return getUid();

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case BALLOT_NUMBER:
                return isSetBallotNumber();
            case UID:
                return isSetUid();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof ThriftProposalID)
            return this.equals((ThriftProposalID)that);
        return false;
    }

    public boolean equals(ThriftProposalID that) {
        if (that == null)
            return false;

        boolean this_present_ballotNumber = true;
        boolean that_present_ballotNumber = true;
        if (this_present_ballotNumber || that_present_ballotNumber) {
            if (!(this_present_ballotNumber && that_present_ballotNumber))
                return false;
            if (this.ballotNumber != that.ballotNumber)
                return false;
        }

        boolean this_present_uid = true && this.isSetUid();
        boolean that_present_uid = true && that.isSetUid();
        if (this_present_uid || that_present_uid) {
            if (!(this_present_uid && that_present_uid))
                return false;
            if (!this.uid.equals(that.uid))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_ballotNumber = true;
        list.add(present_ballotNumber);
        if (present_ballotNumber)
            list.add(ballotNumber);

        boolean present_uid = true && (isSetUid());
        list.add(present_uid);
        if (present_uid)
            list.add(uid);

        return list.hashCode();
    }

    @Override
    public int compareTo(ThriftProposalID other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetBallotNumber()).compareTo(other.isSetBallotNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetBallotNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ballotNumber, other.ballotNumber);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUid()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("ThriftProposalID(");
        boolean first = true;

        sb.append("ballotNumber:");
        sb.append(this.ballotNumber);
        first = false;
        if (!first) sb.append(", ");
        sb.append("uid:");
        if (this.uid == null) {
            sb.append("null");
        } else {
            sb.append(this.uid);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class ThriftProposalIDStandardSchemeFactory implements SchemeFactory {
        public ThriftProposalIDStandardScheme getScheme() {
            return new ThriftProposalIDStandardScheme();
        }
    }

    private static class ThriftProposalIDStandardScheme extends StandardScheme<ThriftProposalID> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, ThriftProposalID struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // BALLOT_NUMBER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                            struct.ballotNumber = iprot.readI64();
                            struct.setBallotNumberIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // UID
                        if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                            struct.uid = iprot.readString();
                            struct.setUidIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, ThriftProposalID struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(BALLOT_NUMBER_FIELD_DESC);
            oprot.writeI64(struct.ballotNumber);
            oprot.writeFieldEnd();
            if (struct.uid != null) {
                oprot.writeFieldBegin(UID_FIELD_DESC);
                oprot.writeString(struct.uid);
                oprot.writeFieldEnd();
            }
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class ThriftProposalIDTupleSchemeFactory implements SchemeFactory {
        public ThriftProposalIDTupleScheme getScheme() {
            return new ThriftProposalIDTupleScheme();
        }
    }

    private static class ThriftProposalIDTupleScheme extends TupleScheme<ThriftProposalID> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, ThriftProposalID struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetBallotNumber()) {
                optionals.set(0);
            }
            if (struct.isSetUid()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetBallotNumber()) {
                oprot.writeI64(struct.ballotNumber);
            }
            if (struct.isSetUid()) {
                oprot.writeString(struct.uid);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, ThriftProposalID struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.ballotNumber = iprot.readI64();
                struct.setBallotNumberIsSet(true);
            }
            if (incoming.get(1)) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
            }
        }
    }

}

