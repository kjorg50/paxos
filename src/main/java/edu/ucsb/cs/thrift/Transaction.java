/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.ucsb.cs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2014-12-11")
public class Transaction implements org.apache.thrift.TBase<Transaction, Transaction._Fields>, java.io.Serializable, Cloneable, Comparable<Transaction> {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Transaction");

    private static final org.apache.thrift.protocol.TField LINE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("lineNumber", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField DELTA_FIELD_DESC = new org.apache.thrift.protocol.TField("delta", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
        schemes.put(StandardScheme.class, new TransactionStandardSchemeFactory());
        schemes.put(TupleScheme.class, new TransactionTupleSchemeFactory());
    }

    public int lineNumber; // required
    public int delta; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        LINE_NUMBER((short)1, "lineNumber"),
        DELTA((short)2, "delta");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch(fieldId) {
                case 1: // LINE_NUMBER
                    return LINE_NUMBER;
                case 2: // DELTA
                    return DELTA;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __LINENUMBER_ISSET_ID = 0;
    private static final int __DELTA_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.LINE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("lineNumber", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
        tmpMap.put(_Fields.DELTA, new org.apache.thrift.meta_data.FieldMetaData("delta", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "int")));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Transaction.class, metaDataMap);
    }

    public Transaction() {
    }

    public Transaction(
            int lineNumber,
            int delta)
    {
        this();
        this.lineNumber = lineNumber;
        setLineNumberIsSet(true);
        this.delta = delta;
        setDeltaIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Transaction(Transaction other) {
        __isset_bitfield = other.__isset_bitfield;
        this.lineNumber = other.lineNumber;
        this.delta = other.delta;
    }

    public Transaction deepCopy() {
        return new Transaction(this);
    }

    @Override
    public void clear() {
        setLineNumberIsSet(false);
        this.lineNumber = 0;
        setDeltaIsSet(false);
        this.delta = 0;
    }

    public int getLineNumber() {
        return this.lineNumber;
    }

    public Transaction setLineNumber(int lineNumber) {
        this.lineNumber = lineNumber;
        setLineNumberIsSet(true);
        return this;
    }

    public void unsetLineNumber() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    /** Returns true if field lineNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetLineNumber() {
        return EncodingUtils.testBit(__isset_bitfield, __LINENUMBER_ISSET_ID);
    }

    public void setLineNumberIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LINENUMBER_ISSET_ID, value);
    }

    public int getDelta() {
        return this.delta;
    }

    public Transaction setDelta(int delta) {
        this.delta = delta;
        setDeltaIsSet(true);
        return this;
    }

    public void unsetDelta() {
        __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    /** Returns true if field delta is set (has been assigned a value) and false otherwise */
    public boolean isSetDelta() {
        return EncodingUtils.testBit(__isset_bitfield, __DELTA_ISSET_ID);
    }

    public void setDeltaIsSet(boolean value) {
        __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DELTA_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case LINE_NUMBER:
                if (value == null) {
                    unsetLineNumber();
                } else {
                    setLineNumber((Integer)value);
                }
                break;

            case DELTA:
                if (value == null) {
                    unsetDelta();
                } else {
                    setDelta((Integer)value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case LINE_NUMBER:
                return Integer.valueOf(getLineNumber());

            case DELTA:
                return Integer.valueOf(getDelta());

        }
        throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case LINE_NUMBER:
                return isSetLineNumber();
            case DELTA:
                return isSetDelta();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Transaction)
            return this.equals((Transaction)that);
        return false;
    }

    public boolean equals(Transaction that) {
        if (that == null)
            return false;

        boolean this_present_lineNumber = true;
        boolean that_present_lineNumber = true;
        if (this_present_lineNumber || that_present_lineNumber) {
            if (!(this_present_lineNumber && that_present_lineNumber))
                return false;
            if (this.lineNumber != that.lineNumber)
                return false;
        }

        boolean this_present_delta = true;
        boolean that_present_delta = true;
        if (this_present_delta || that_present_delta) {
            if (!(this_present_delta && that_present_delta))
                return false;
            if (this.delta != that.delta)
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        List<Object> list = new ArrayList<Object>();

        boolean present_lineNumber = true;
        list.add(present_lineNumber);
        if (present_lineNumber)
            list.add(lineNumber);

        boolean present_delta = true;
        list.add(present_delta);
        if (present_delta)
            list.add(delta);

        return list.hashCode();
    }

    @Override
    public int compareTo(Transaction other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;

        lastComparison = Boolean.valueOf(isSetLineNumber()).compareTo(other.isSetLineNumber());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetLineNumber()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lineNumber, other.lineNumber);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetDelta()).compareTo(other.isSetDelta());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetDelta()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delta, other.delta);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Transaction(");
        boolean first = true;

        sb.append("lineNumber:");
        sb.append(this.lineNumber);
        first = false;
        if (!first) sb.append(", ");
        sb.append("delta:");
        sb.append(this.delta);
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
        // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bitfield = 0;
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private static class TransactionStandardSchemeFactory implements SchemeFactory {
        public TransactionStandardScheme getScheme() {
            return new TransactionStandardScheme();
        }
    }

    private static class TransactionStandardScheme extends StandardScheme<Transaction> {

        public void read(org.apache.thrift.protocol.TProtocol iprot, Transaction struct) throws org.apache.thrift.TException {
            org.apache.thrift.protocol.TField schemeField;
            iprot.readStructBegin();
            while (true)
            {
                schemeField = iprot.readFieldBegin();
                if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
                    break;
                }
                switch (schemeField.id) {
                    case 1: // LINE_NUMBER
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.lineNumber = iprot.readI32();
                            struct.setLineNumberIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    case 2: // DELTA
                        if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                            struct.delta = iprot.readI32();
                            struct.setDeltaIsSet(true);
                        } else {
                            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                        }
                        break;
                    default:
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
                }
                iprot.readFieldEnd();
            }
            iprot.readStructEnd();

            // check for required fields of primitive type, which can't be checked in the validate method
            struct.validate();
        }

        public void write(org.apache.thrift.protocol.TProtocol oprot, Transaction struct) throws org.apache.thrift.TException {
            struct.validate();

            oprot.writeStructBegin(STRUCT_DESC);
            oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
            oprot.writeI32(struct.lineNumber);
            oprot.writeFieldEnd();
            oprot.writeFieldBegin(DELTA_FIELD_DESC);
            oprot.writeI32(struct.delta);
            oprot.writeFieldEnd();
            oprot.writeFieldStop();
            oprot.writeStructEnd();
        }

    }

    private static class TransactionTupleSchemeFactory implements SchemeFactory {
        public TransactionTupleScheme getScheme() {
            return new TransactionTupleScheme();
        }
    }

    private static class TransactionTupleScheme extends TupleScheme<Transaction> {

        @Override
        public void write(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
            TTupleProtocol oprot = (TTupleProtocol) prot;
            BitSet optionals = new BitSet();
            if (struct.isSetLineNumber()) {
                optionals.set(0);
            }
            if (struct.isSetDelta()) {
                optionals.set(1);
            }
            oprot.writeBitSet(optionals, 2);
            if (struct.isSetLineNumber()) {
                oprot.writeI32(struct.lineNumber);
            }
            if (struct.isSetDelta()) {
                oprot.writeI32(struct.delta);
            }
        }

        @Override
        public void read(org.apache.thrift.protocol.TProtocol prot, Transaction struct) throws org.apache.thrift.TException {
            TTupleProtocol iprot = (TTupleProtocol) prot;
            BitSet incoming = iprot.readBitSet(2);
            if (incoming.get(0)) {
                struct.lineNumber = iprot.readI32();
                struct.setLineNumberIsSet(true);
            }
            if (incoming.get(1)) {
                struct.delta = iprot.readI32();
                struct.setDeltaIsSet(true);
            }
        }
    }

}

